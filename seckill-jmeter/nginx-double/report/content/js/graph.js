/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 29.0, "minX": 0.0, "maxY": 56011.0, "series": [{"data": [[0.0, 29.0], [0.1, 30.0], [0.2, 30.0], [0.3, 30.0], [0.4, 30.0], [0.5, 30.0], [0.6, 30.0], [0.7, 31.0], [0.8, 31.0], [0.9, 31.0], [1.0, 31.0], [1.1, 31.0], [1.2, 31.0], [1.3, 31.0], [1.4, 31.0], [1.5, 31.0], [1.6, 31.0], [1.7, 31.0], [1.8, 31.0], [1.9, 31.0], [2.0, 31.0], [2.1, 31.0], [2.2, 31.0], [2.3, 31.0], [2.4, 31.0], [2.5, 32.0], [2.6, 32.0], [2.7, 32.0], [2.8, 32.0], [2.9, 32.0], [3.0, 32.0], [3.1, 32.0], [3.2, 32.0], [3.3, 32.0], [3.4, 32.0], [3.5, 32.0], [3.6, 32.0], [3.7, 32.0], [3.8, 32.0], [3.9, 32.0], [4.0, 32.0], [4.1, 32.0], [4.2, 32.0], [4.3, 32.0], [4.4, 32.0], [4.5, 32.0], [4.6, 32.0], [4.7, 32.0], [4.8, 32.0], [4.9, 32.0], [5.0, 32.0], [5.1, 33.0], [5.2, 33.0], [5.3, 33.0], [5.4, 33.0], [5.5, 33.0], [5.6, 33.0], [5.7, 33.0], [5.8, 33.0], [5.9, 33.0], [6.0, 33.0], [6.1, 33.0], [6.2, 33.0], [6.3, 33.0], [6.4, 33.0], [6.5, 33.0], [6.6, 33.0], [6.7, 33.0], [6.8, 33.0], [6.9, 33.0], [7.0, 33.0], [7.1, 33.0], [7.2, 33.0], [7.3, 33.0], [7.4, 33.0], [7.5, 33.0], [7.6, 33.0], [7.7, 33.0], [7.8, 33.0], [7.9, 34.0], [8.0, 34.0], [8.1, 34.0], [8.2, 34.0], [8.3, 34.0], [8.4, 34.0], [8.5, 34.0], [8.6, 34.0], [8.7, 34.0], [8.8, 34.0], [8.9, 34.0], [9.0, 34.0], [9.1, 34.0], [9.2, 34.0], [9.3, 34.0], [9.4, 34.0], [9.5, 34.0], [9.6, 34.0], [9.7, 34.0], [9.8, 34.0], [9.9, 34.0], [10.0, 34.0], [10.1, 34.0], [10.2, 34.0], [10.3, 34.0], [10.4, 34.0], [10.5, 34.0], [10.6, 34.0], [10.7, 34.0], [10.8, 34.0], [10.9, 34.0], [11.0, 34.0], [11.1, 35.0], [11.2, 35.0], [11.3, 35.0], [11.4, 35.0], [11.5, 35.0], [11.6, 35.0], [11.7, 35.0], [11.8, 35.0], [11.9, 35.0], [12.0, 35.0], [12.1, 35.0], [12.2, 35.0], [12.3, 35.0], [12.4, 35.0], [12.5, 35.0], [12.6, 35.0], [12.7, 35.0], [12.8, 35.0], [12.9, 35.0], [13.0, 35.0], [13.1, 35.0], [13.2, 35.0], [13.3, 35.0], [13.4, 35.0], [13.5, 35.0], [13.6, 35.0], [13.7, 35.0], [13.8, 35.0], [13.9, 35.0], [14.0, 35.0], [14.1, 35.0], [14.2, 35.0], [14.3, 35.0], [14.4, 35.0], [14.5, 35.0], [14.6, 35.0], [14.7, 35.0], [14.8, 35.0], [14.9, 35.0], [15.0, 35.0], [15.1, 35.0], [15.2, 35.0], [15.3, 35.0], [15.4, 35.0], [15.5, 35.0], [15.6, 35.0], [15.7, 35.0], [15.8, 35.0], [15.9, 35.0], [16.0, 35.0], [16.1, 36.0], [16.2, 36.0], [16.3, 36.0], [16.4, 36.0], [16.5, 36.0], [16.6, 36.0], [16.7, 36.0], [16.8, 36.0], [16.9, 36.0], [17.0, 36.0], [17.1, 36.0], [17.2, 36.0], [17.3, 36.0], [17.4, 36.0], [17.5, 36.0], [17.6, 36.0], [17.7, 36.0], [17.8, 36.0], [17.9, 36.0], [18.0, 36.0], [18.1, 36.0], [18.2, 36.0], [18.3, 36.0], [18.4, 36.0], [18.5, 36.0], [18.6, 36.0], [18.7, 36.0], [18.8, 36.0], [18.9, 36.0], [19.0, 36.0], [19.1, 36.0], [19.2, 36.0], [19.3, 36.0], [19.4, 36.0], [19.5, 36.0], [19.6, 36.0], [19.7, 36.0], [19.8, 36.0], [19.9, 36.0], [20.0, 36.0], [20.1, 36.0], [20.2, 36.0], [20.3, 36.0], [20.4, 36.0], [20.5, 36.0], [20.6, 36.0], [20.7, 36.0], [20.8, 36.0], [20.9, 36.0], [21.0, 36.0], [21.1, 36.0], [21.2, 36.0], [21.3, 36.0], [21.4, 36.0], [21.5, 36.0], [21.6, 36.0], [21.7, 37.0], [21.8, 37.0], [21.9, 37.0], [22.0, 37.0], [22.1, 37.0], [22.2, 37.0], [22.3, 37.0], [22.4, 37.0], [22.5, 37.0], [22.6, 37.0], [22.7, 37.0], [22.8, 37.0], [22.9, 37.0], [23.0, 37.0], [23.1, 37.0], [23.2, 37.0], [23.3, 37.0], [23.4, 37.0], [23.5, 37.0], [23.6, 37.0], [23.7, 37.0], [23.8, 37.0], [23.9, 37.0], [24.0, 37.0], [24.1, 37.0], [24.2, 37.0], [24.3, 37.0], [24.4, 37.0], [24.5, 37.0], [24.6, 37.0], [24.7, 37.0], [24.8, 37.0], [24.9, 37.0], [25.0, 37.0], [25.1, 37.0], [25.2, 37.0], [25.3, 37.0], [25.4, 37.0], [25.5, 37.0], [25.6, 37.0], [25.7, 37.0], [25.8, 37.0], [25.9, 37.0], [26.0, 37.0], [26.1, 37.0], [26.2, 37.0], [26.3, 37.0], [26.4, 37.0], [26.5, 38.0], [26.6, 38.0], [26.7, 38.0], [26.8, 38.0], [26.9, 38.0], [27.0, 38.0], [27.1, 38.0], [27.2, 38.0], [27.3, 38.0], [27.4, 38.0], [27.5, 38.0], [27.6, 38.0], [27.7, 38.0], [27.8, 38.0], [27.9, 38.0], [28.0, 38.0], [28.1, 38.0], [28.2, 38.0], [28.3, 38.0], [28.4, 38.0], [28.5, 38.0], [28.6, 38.0], [28.7, 38.0], [28.8, 38.0], [28.9, 38.0], [29.0, 38.0], [29.1, 38.0], [29.2, 38.0], [29.3, 38.0], [29.4, 38.0], [29.5, 38.0], [29.6, 38.0], [29.7, 38.0], [29.8, 38.0], [29.9, 38.0], [30.0, 38.0], [30.1, 38.0], [30.2, 38.0], [30.3, 38.0], [30.4, 38.0], [30.5, 38.0], [30.6, 38.0], [30.7, 38.0], [30.8, 38.0], [30.9, 38.0], [31.0, 38.0], [31.1, 38.0], [31.2, 38.0], [31.3, 38.0], [31.4, 38.0], [31.5, 38.0], [31.6, 38.0], [31.7, 39.0], [31.8, 39.0], [31.9, 39.0], [32.0, 39.0], [32.1, 39.0], [32.2, 39.0], [32.3, 39.0], [32.4, 39.0], [32.5, 39.0], [32.6, 39.0], [32.7, 39.0], [32.8, 39.0], [32.9, 39.0], [33.0, 39.0], [33.1, 39.0], [33.2, 39.0], [33.3, 39.0], [33.4, 39.0], [33.5, 39.0], [33.6, 39.0], [33.7, 39.0], [33.8, 39.0], [33.9, 39.0], [34.0, 39.0], [34.1, 39.0], [34.2, 39.0], [34.3, 39.0], [34.4, 39.0], [34.5, 39.0], [34.6, 39.0], [34.7, 39.0], [34.8, 39.0], [34.9, 39.0], [35.0, 39.0], [35.1, 39.0], [35.2, 39.0], [35.3, 39.0], [35.4, 39.0], [35.5, 39.0], [35.6, 39.0], [35.7, 39.0], [35.8, 39.0], [35.9, 39.0], [36.0, 39.0], [36.1, 39.0], [36.2, 39.0], [36.3, 39.0], [36.4, 39.0], [36.5, 39.0], [36.6, 39.0], [36.7, 39.0], [36.8, 39.0], [36.9, 39.0], [37.0, 39.0], [37.1, 39.0], [37.2, 39.0], [37.3, 40.0], [37.4, 40.0], [37.5, 40.0], [37.6, 40.0], [37.7, 40.0], [37.8, 40.0], [37.9, 40.0], [38.0, 40.0], [38.1, 40.0], [38.2, 40.0], [38.3, 40.0], [38.4, 40.0], [38.5, 40.0], [38.6, 40.0], [38.7, 40.0], [38.8, 40.0], [38.9, 40.0], [39.0, 40.0], [39.1, 40.0], [39.2, 40.0], [39.3, 40.0], [39.4, 40.0], [39.5, 40.0], [39.6, 40.0], [39.7, 40.0], [39.8, 40.0], [39.9, 40.0], [40.0, 40.0], [40.1, 40.0], [40.2, 40.0], [40.3, 40.0], [40.4, 40.0], [40.5, 40.0], [40.6, 40.0], [40.7, 40.0], [40.8, 40.0], [40.9, 40.0], [41.0, 40.0], [41.1, 40.0], [41.2, 40.0], [41.3, 40.0], [41.4, 40.0], [41.5, 40.0], [41.6, 40.0], [41.7, 40.0], [41.8, 40.0], [41.9, 40.0], [42.0, 40.0], [42.1, 40.0], [42.2, 40.0], [42.3, 40.0], [42.4, 40.0], [42.5, 41.0], [42.6, 41.0], [42.7, 41.0], [42.8, 41.0], [42.9, 41.0], [43.0, 41.0], [43.1, 41.0], [43.2, 41.0], [43.3, 41.0], [43.4, 41.0], [43.5, 41.0], [43.6, 41.0], [43.7, 41.0], [43.8, 41.0], [43.9, 41.0], [44.0, 41.0], [44.1, 41.0], [44.2, 41.0], [44.3, 41.0], [44.4, 41.0], [44.5, 41.0], [44.6, 41.0], [44.7, 41.0], [44.8, 41.0], [44.9, 41.0], [45.0, 41.0], [45.1, 41.0], [45.2, 41.0], [45.3, 41.0], [45.4, 41.0], [45.5, 41.0], [45.6, 41.0], [45.7, 41.0], [45.8, 41.0], [45.9, 41.0], [46.0, 41.0], [46.1, 41.0], [46.2, 41.0], [46.3, 42.0], [46.4, 42.0], [46.5, 42.0], [46.6, 42.0], [46.7, 42.0], [46.8, 42.0], [46.9, 42.0], [47.0, 42.0], [47.1, 42.0], [47.2, 42.0], [47.3, 42.0], [47.4, 42.0], [47.5, 42.0], [47.6, 42.0], [47.7, 42.0], [47.8, 42.0], [47.9, 42.0], [48.0, 42.0], [48.1, 42.0], [48.2, 42.0], [48.3, 42.0], [48.4, 42.0], [48.5, 42.0], [48.6, 42.0], [48.7, 42.0], [48.8, 42.0], [48.9, 42.0], [49.0, 42.0], [49.1, 42.0], [49.2, 43.0], [49.3, 43.0], [49.4, 43.0], [49.5, 43.0], [49.6, 43.0], [49.7, 43.0], [49.8, 43.0], [49.9, 43.0], [50.0, 43.0], [50.1, 43.0], [50.2, 43.0], [50.3, 43.0], [50.4, 43.0], [50.5, 43.0], [50.6, 43.0], [50.7, 43.0], [50.8, 43.0], [50.9, 43.0], [51.0, 43.0], [51.1, 43.0], [51.2, 43.0], [51.3, 43.0], [51.4, 43.0], [51.5, 43.0], [51.6, 43.0], [51.7, 44.0], [51.8, 44.0], [51.9, 44.0], [52.0, 44.0], [52.1, 44.0], [52.2, 44.0], [52.3, 44.0], [52.4, 44.0], [52.5, 44.0], [52.6, 44.0], [52.7, 44.0], [52.8, 44.0], [52.9, 44.0], [53.0, 44.0], [53.1, 44.0], [53.2, 44.0], [53.3, 44.0], [53.4, 45.0], [53.5, 45.0], [53.6, 45.0], [53.7, 45.0], [53.8, 45.0], [53.9, 45.0], [54.0, 45.0], [54.1, 45.0], [54.2, 45.0], [54.3, 45.0], [54.4, 45.0], [54.5, 45.0], [54.6, 45.0], [54.7, 45.0], [54.8, 45.0], [54.9, 46.0], [55.0, 46.0], [55.1, 46.0], [55.2, 46.0], [55.3, 46.0], [55.4, 46.0], [55.5, 46.0], [55.6, 46.0], [55.7, 46.0], [55.8, 46.0], [55.9, 46.0], [56.0, 46.0], [56.1, 47.0], [56.2, 47.0], [56.3, 47.0], [56.4, 47.0], [56.5, 47.0], [56.6, 47.0], [56.7, 47.0], [56.8, 47.0], [56.9, 47.0], [57.0, 47.0], [57.1, 48.0], [57.2, 48.0], [57.3, 48.0], [57.4, 48.0], [57.5, 48.0], [57.6, 48.0], [57.7, 48.0], [57.8, 48.0], [57.9, 48.0], [58.0, 49.0], [58.1, 49.0], [58.2, 49.0], [58.3, 49.0], [58.4, 49.0], [58.5, 49.0], [58.6, 50.0], [58.7, 50.0], [58.8, 50.0], [58.9, 50.0], [59.0, 50.0], [59.1, 51.0], [59.2, 51.0], [59.3, 51.0], [59.4, 51.0], [59.5, 51.0], [59.6, 52.0], [59.7, 52.0], [59.8, 52.0], [59.9, 52.0], [60.0, 53.0], [60.1, 53.0], [60.2, 53.0], [60.3, 53.0], [60.4, 54.0], [60.5, 54.0], [60.6, 54.0], [60.7, 54.0], [60.8, 55.0], [60.9, 55.0], [61.0, 55.0], [61.1, 56.0], [61.2, 56.0], [61.3, 57.0], [61.4, 57.0], [61.5, 58.0], [61.6, 58.0], [61.7, 59.0], [61.8, 59.0], [61.9, 60.0], [62.0, 60.0], [62.1, 61.0], [62.2, 62.0], [62.3, 62.0], [62.4, 63.0], [62.5, 63.0], [62.6, 64.0], [62.7, 65.0], [62.8, 65.0], [62.9, 66.0], [63.0, 67.0], [63.1, 68.0], [63.2, 68.0], [63.3, 69.0], [63.4, 70.0], [63.5, 71.0], [63.6, 71.0], [63.7, 72.0], [63.8, 73.0], [63.9, 74.0], [64.0, 74.0], [64.1, 75.0], [64.2, 76.0], [64.3, 76.0], [64.4, 77.0], [64.5, 77.0], [64.6, 78.0], [64.7, 79.0], [64.8, 80.0], [64.9, 80.0], [65.0, 81.0], [65.1, 81.0], [65.2, 82.0], [65.3, 83.0], [65.4, 84.0], [65.5, 85.0], [65.6, 85.0], [65.7, 86.0], [65.8, 87.0], [65.9, 88.0], [66.0, 89.0], [66.1, 90.0], [66.2, 92.0], [66.3, 94.0], [66.4, 96.0], [66.5, 98.0], [66.6, 100.0], [66.7, 103.0], [66.8, 106.0], [66.9, 109.0], [67.0, 113.0], [67.1, 116.0], [67.2, 121.0], [67.3, 128.0], [67.4, 134.0], [67.5, 140.0], [67.6, 147.0], [67.7, 151.0], [67.8, 154.0], [67.9, 159.0], [68.0, 163.0], [68.1, 168.0], [68.2, 175.0], [68.3, 189.0], [68.4, 204.0], [68.5, 230.0], [68.6, 258.0], [68.7, 261.0], [68.8, 262.0], [68.9, 263.0], [69.0, 263.0], [69.1, 264.0], [69.2, 264.0], [69.3, 265.0], [69.4, 266.0], [69.5, 266.0], [69.6, 266.0], [69.7, 267.0], [69.8, 267.0], [69.9, 268.0], [70.0, 268.0], [70.1, 268.0], [70.2, 269.0], [70.3, 269.0], [70.4, 269.0], [70.5, 270.0], [70.6, 270.0], [70.7, 270.0], [70.8, 270.0], [70.9, 271.0], [71.0, 271.0], [71.1, 271.0], [71.2, 271.0], [71.3, 271.0], [71.4, 272.0], [71.5, 272.0], [71.6, 272.0], [71.7, 272.0], [71.8, 273.0], [71.9, 273.0], [72.0, 273.0], [72.1, 273.0], [72.2, 273.0], [72.3, 274.0], [72.4, 274.0], [72.5, 274.0], [72.6, 274.0], [72.7, 274.0], [72.8, 275.0], [72.9, 275.0], [73.0, 275.0], [73.1, 275.0], [73.2, 276.0], [73.3, 276.0], [73.4, 276.0], [73.5, 276.0], [73.6, 276.0], [73.7, 277.0], [73.8, 277.0], [73.9, 277.0], [74.0, 277.0], [74.1, 277.0], [74.2, 278.0], [74.3, 278.0], [74.4, 278.0], [74.5, 278.0], [74.6, 278.0], [74.7, 279.0], [74.8, 279.0], [74.9, 279.0], [75.0, 279.0], [75.1, 279.0], [75.2, 280.0], [75.3, 280.0], [75.4, 280.0], [75.5, 280.0], [75.6, 281.0], [75.7, 281.0], [75.8, 281.0], [75.9, 281.0], [76.0, 281.0], [76.1, 282.0], [76.2, 282.0], [76.3, 282.0], [76.4, 283.0], [76.5, 283.0], [76.6, 283.0], [76.7, 283.0], [76.8, 284.0], [76.9, 284.0], [77.0, 284.0], [77.1, 285.0], [77.2, 285.0], [77.3, 285.0], [77.4, 286.0], [77.5, 286.0], [77.6, 286.0], [77.7, 287.0], [77.8, 287.0], [77.9, 288.0], [78.0, 288.0], [78.1, 288.0], [78.2, 289.0], [78.3, 289.0], [78.4, 290.0], [78.5, 290.0], [78.6, 291.0], [78.7, 291.0], [78.8, 292.0], [78.9, 292.0], [79.0, 293.0], [79.1, 293.0], [79.2, 294.0], [79.3, 295.0], [79.4, 296.0], [79.5, 296.0], [79.6, 297.0], [79.7, 298.0], [79.8, 299.0], [79.9, 299.0], [80.0, 300.0], [80.1, 301.0], [80.2, 302.0], [80.3, 303.0], [80.4, 304.0], [80.5, 305.0], [80.6, 306.0], [80.7, 307.0], [80.8, 309.0], [80.9, 310.0], [81.0, 313.0], [81.1, 314.0], [81.2, 316.0], [81.3, 318.0], [81.4, 321.0], [81.5, 324.0], [81.6, 329.0], [81.7, 334.0], [81.8, 339.0], [81.9, 349.0], [82.0, 365.0], [82.1, 380.0], [82.2, 396.0], [82.3, 420.0], [82.4, 493.0], [82.5, 497.0], [82.6, 500.0], [82.7, 502.0], [82.8, 505.0], [82.9, 507.0], [83.0, 508.0], [83.1, 509.0], [83.2, 510.0], [83.3, 512.0], [83.4, 513.0], [83.5, 514.0], [83.6, 516.0], [83.7, 517.0], [83.8, 518.0], [83.9, 519.0], [84.0, 520.0], [84.1, 521.0], [84.2, 522.0], [84.3, 524.0], [84.4, 525.0], [84.5, 527.0], [84.6, 529.0], [84.7, 530.0], [84.8, 532.0], [84.9, 534.0], [85.0, 537.0], [85.1, 539.0], [85.2, 542.0], [85.3, 546.0], [85.4, 550.0], [85.5, 554.0], [85.6, 556.0], [85.7, 560.0], [85.8, 564.0], [85.9, 572.0], [86.0, 581.0], [86.1, 593.0], [86.2, 619.0], [86.3, 720.0], [86.4, 725.0], [86.5, 728.0], [86.6, 731.0], [86.7, 734.0], [86.8, 736.0], [86.9, 738.0], [87.0, 739.0], [87.1, 741.0], [87.2, 742.0], [87.3, 743.0], [87.4, 744.0], [87.5, 746.0], [87.6, 747.0], [87.7, 748.0], [87.8, 749.0], [87.9, 750.0], [88.0, 751.0], [88.1, 752.0], [88.2, 753.0], [88.3, 754.0], [88.4, 755.0], [88.5, 756.0], [88.6, 757.0], [88.7, 758.0], [88.8, 759.0], [88.9, 760.0], [89.0, 761.0], [89.1, 763.0], [89.2, 765.0], [89.3, 766.0], [89.4, 767.0], [89.5, 769.0], [89.6, 772.0], [89.7, 775.0], [89.8, 778.0], [89.9, 780.0], [90.0, 785.0], [90.1, 792.0], [90.2, 802.0], [90.3, 824.0], [90.4, 850.0], [90.5, 948.0], [90.6, 963.0], [90.7, 969.0], [90.8, 975.0], [90.9, 979.0], [91.0, 982.0], [91.1, 985.0], [91.2, 988.0], [91.3, 991.0], [91.4, 994.0], [91.5, 997.0], [91.6, 1001.0], [91.7, 1007.0], [91.8, 1012.0], [91.9, 1022.0], [92.0, 1031.0], [92.1, 1048.0], [92.2, 1065.0], [92.3, 1097.0], [92.4, 1186.0], [92.5, 1196.0], [92.6, 1204.0], [92.7, 1210.0], [92.8, 1215.0], [92.9, 1220.0], [93.0, 1224.0], [93.1, 1229.0], [93.2, 1234.0], [93.3, 1236.0], [93.4, 1241.0], [93.5, 1247.0], [93.6, 1255.0], [93.7, 1262.0], [93.8, 1278.0], [93.9, 1320.0], [94.0, 1399.0], [94.1, 1458.0], [94.2, 1491.0], [94.3, 1515.0], [94.4, 1546.0], [94.5, 1674.0], [94.6, 1720.0], [94.7, 1759.0], [94.8, 1823.0], [94.9, 1909.0], [95.0, 1926.0], [95.1, 1942.0], [95.2, 1956.0], [95.3, 1976.0], [95.4, 1997.0], [95.5, 2030.0], [95.6, 2123.0], [95.7, 2147.0], [95.8, 2164.0], [95.9, 2177.0], [96.0, 2194.0], [96.1, 2208.0], [96.2, 2230.0], [96.3, 2308.0], [96.4, 2437.0], [96.5, 2516.0], [96.6, 3054.0], [96.7, 3116.0], [96.8, 3266.0], [96.9, 3419.0], [97.0, 3580.0], [97.1, 3741.0], [97.2, 3823.0], [97.3, 3882.0], [97.4, 3965.0], [97.5, 4022.0], [97.6, 4075.0], [97.7, 4126.0], [97.8, 4201.0], [97.9, 4335.0], [98.0, 4577.0], [98.1, 6003.0], [98.2, 6410.0], [98.3, 7184.0], [98.4, 7469.0], [98.5, 7609.0], [98.6, 7751.0], [98.7, 7878.0], [98.8, 8039.0], [98.9, 8257.0], [99.0, 11494.0], [99.1, 13248.0], [99.2, 14536.0], [99.3, 15118.0], [99.4, 15411.0], [99.5, 15726.0], [99.6, 16222.0], [99.7, 23978.0], [99.8, 29243.0], [99.9, 30302.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 26632.0, "series": [{"data": [[0.0, 26632.0], [100.0, 719.0], [200.0, 4618.0], [300.0, 917.0], [400.0, 146.0], [500.0, 1426.0], [600.0, 57.0], [700.0, 1561.0], [800.0, 116.0], [900.0, 434.0], [1000.0, 299.0], [1100.0, 87.0], [1200.0, 533.0], [1300.0, 56.0], [1400.0, 94.0], [1500.0, 94.0], [1600.0, 34.0], [1700.0, 92.0], [1800.0, 35.0], [1900.0, 216.0], [2000.0, 57.0], [2100.0, 189.0], [2300.0, 23.0], [2200.0, 104.0], [2400.0, 58.0], [2500.0, 13.0], [2600.0, 8.0], [2800.0, 5.0], [2700.0, 6.0], [2900.0, 10.0], [3000.0, 30.0], [3100.0, 37.0], [3300.0, 31.0], [3200.0, 17.0], [3400.0, 32.0], [3500.0, 16.0], [3600.0, 28.0], [3700.0, 33.0], [3800.0, 71.0], [3900.0, 49.0], [4000.0, 71.0], [4200.0, 32.0], [4100.0, 65.0], [4300.0, 26.0], [4500.0, 6.0], [4600.0, 4.0], [4400.0, 18.0], [4700.0, 4.0], [4800.0, 2.0], [4900.0, 2.0], [5000.0, 1.0], [5600.0, 2.0], [5500.0, 1.0], [5800.0, 11.0], [5700.0, 1.0], [6100.0, 12.0], [5900.0, 11.0], [6000.0, 9.0], [6300.0, 13.0], [6200.0, 4.0], [6400.0, 6.0], [6600.0, 3.0], [6900.0, 11.0], [6800.0, 6.0], [6700.0, 3.0], [7000.0, 9.0], [7100.0, 5.0], [7400.0, 25.0], [7300.0, 13.0], [7200.0, 12.0], [7600.0, 25.0], [7500.0, 27.0], [7700.0, 32.0], [7800.0, 35.0], [7900.0, 29.0], [8100.0, 12.0], [8000.0, 19.0], [8500.0, 4.0], [8700.0, 5.0], [8400.0, 6.0], [8200.0, 14.0], [8300.0, 10.0], [9000.0, 1.0], [8900.0, 3.0], [9100.0, 1.0], [10400.0, 1.0], [10500.0, 1.0], [11400.0, 3.0], [11600.0, 7.0], [11300.0, 2.0], [11700.0, 10.0], [11500.0, 2.0], [12000.0, 2.0], [12200.0, 1.0], [11900.0, 3.0], [12100.0, 5.0], [11800.0, 2.0], [12300.0, 1.0], [13200.0, 4.0], [12800.0, 2.0], [13300.0, 1.0], [13000.0, 1.0], [13700.0, 2.0], [13400.0, 4.0], [13500.0, 5.0], [13800.0, 9.0], [13600.0, 1.0], [14300.0, 4.0], [13900.0, 2.0], [14000.0, 5.0], [14200.0, 2.0], [14700.0, 5.0], [14400.0, 4.0], [14500.0, 3.0], [14600.0, 6.0], [14800.0, 5.0], [15200.0, 16.0], [15000.0, 11.0], [15100.0, 8.0], [15300.0, 17.0], [14900.0, 8.0], [15500.0, 15.0], [15400.0, 17.0], [15700.0, 14.0], [15600.0, 6.0], [15800.0, 9.0], [16300.0, 2.0], [16000.0, 5.0], [16200.0, 3.0], [15900.0, 9.0], [16100.0, 6.0], [16800.0, 1.0], [17000.0, 2.0], [17200.0, 1.0], [16400.0, 1.0], [22200.0, 1.0], [22800.0, 4.0], [23200.0, 2.0], [23400.0, 1.0], [23600.0, 1.0], [24000.0, 1.0], [25000.0, 1.0], [26400.0, 3.0], [25600.0, 1.0], [26800.0, 1.0], [27000.0, 2.0], [27600.0, 1.0], [28200.0, 1.0], [28600.0, 3.0], [29400.0, 5.0], [29000.0, 4.0], [29600.0, 2.0], [29200.0, 2.0], [28800.0, 1.0], [30600.0, 4.0], [30000.0, 5.0], [30200.0, 6.0], [30400.0, 7.0], [29800.0, 2.0], [31400.0, 2.0], [31000.0, 2.0], [31800.0, 1.0], [32000.0, 1.0], [32600.0, 2.0], [56000.0, 1.0], [33500.0, 1.0], [46300.0, 1.0], [16900.0, 1.0], [17100.0, 1.0], [22500.0, 2.0], [22300.0, 1.0], [23100.0, 4.0], [22900.0, 3.0], [23300.0, 3.0], [22700.0, 2.0], [23500.0, 3.0], [23900.0, 2.0], [24700.0, 1.0], [26300.0, 2.0], [26500.0, 2.0], [26700.0, 2.0], [27300.0, 3.0], [26900.0, 3.0], [27100.0, 1.0], [27700.0, 1.0], [29500.0, 6.0], [29300.0, 1.0], [28700.0, 2.0], [29100.0, 3.0], [30300.0, 6.0], [30500.0, 4.0], [29700.0, 4.0], [30100.0, 7.0], [31700.0, 2.0], [31500.0, 1.0], [30900.0, 3.0], [31300.0, 1.0], [46600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 56000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2304.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 33050.0, "series": [{"data": [[0.0, 33050.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 4646.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2304.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 26.01481481481482, "minX": 1.57669554E12, "maxY": 498.42353545734835, "series": [{"data": [[1.57669554E12, 498.42353545734835], [1.5766956E12, 26.01481481481482]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5766956E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 34.650000000000006, "minX": 1.0, "maxY": 18698.0, "series": [{"data": [[2.0, 2158.2727272727266], [3.0, 2137.5000000000005], [4.0, 565.4827586206895], [5.0, 37.666666666666664], [6.0, 40.0], [7.0, 39.25], [8.0, 37.93333333333333], [9.0, 40.16666666666667], [10.0, 53.70588235294118], [11.0, 44.25000000000001], [12.0, 40.10000000000001], [13.0, 46.87500000000001], [14.0, 1397.6956521739132], [15.0, 37.26315789473684], [16.0, 39.318181818181834], [17.0, 764.4545454545455], [18.0, 1255.5211267605632], [19.0, 2650.3636363636365], [20.0, 1800.5510204081634], [21.0, 852.6060606060607], [22.0, 37.25], [23.0, 397.75555555555553], [24.0, 37.66666666666667], [25.0, 2123.769230769231], [26.0, 1030.3384615384618], [27.0, 42.76470588235294], [28.0, 41.599999999999994], [29.0, 39.0], [30.0, 38.57692307692308], [31.0, 646.0357142857142], [32.0, 43.76923076923076], [33.0, 43.68750000000001], [34.0, 2196.9285714285716], [35.0, 37.599999999999994], [36.0, 40.82758620689654], [37.0, 384.60869565217394], [38.0, 49.31250000000001], [39.0, 39.2], [40.0, 740.9223300970866], [41.0, 1023.9310344827584], [42.0, 1354.5172413793105], [43.0, 40.666666666666664], [45.0, 38.375], [44.0, 35.0], [46.0, 403.2068965517241], [47.0, 52.440000000000005], [48.0, 687.1063829787234], [49.0, 276.3636363636363], [50.0, 248.55263157894728], [51.0, 738.4029850746269], [52.0, 39.88235294117648], [53.0, 47.24999999999999], [54.0, 45.888888888888886], [55.0, 1751.025000000001], [56.0, 682.7659574468084], [57.0, 753.2105263157894], [58.0, 1343.9333333333334], [59.0, 687.3333333333335], [60.0, 42.64000000000001], [61.0, 820.8181818181822], [62.0, 521.84375], [63.0, 43.647058823529406], [64.0, 49.39285714285713], [65.0, 46.54545454545454], [66.0, 45.55555555555556], [67.0, 50.973684210526315], [68.0, 783.5384615384615], [69.0, 39.54545454545454], [70.0, 2186.375], [71.0, 57.88095238095239], [72.0, 54.00000000000001], [73.0, 40.407407407407405], [75.0, 473.4722222222222], [74.0, 39.5], [76.0, 52.015625], [77.0, 74.99999999999999], [78.0, 40.95454545454545], [79.0, 45.80555555555555], [80.0, 52.44444444444444], [82.0, 53.11290322580644], [83.0, 229.26249999999993], [81.0, 37.76666666666668], [84.0, 45.250000000000014], [85.0, 662.8514851485149], [86.0, 1015.7272727272725], [87.0, 203.44554455445544], [88.0, 312.28571428571445], [89.0, 52.0], [90.0, 47.67346938775509], [91.0, 376.2394366197184], [92.0, 76.88235294117646], [93.0, 71.5], [94.0, 50.680851063829785], [95.0, 60.80769230769231], [96.0, 2436.416666666666], [97.0, 54.92105263157895], [98.0, 2342.7391304347825], [99.0, 371.18], [100.0, 1484.2459016393439], [101.0, 330.80000000000007], [103.0, 583.5686274509802], [102.0, 44.0], [104.0, 509.4897959183674], [105.0, 49.625], [106.0, 737.2575757575758], [107.0, 71.51162790697673], [109.0, 676.2800000000001], [110.0, 506.7048458149782], [111.0, 49.58823529411766], [108.0, 39.333333333333336], [112.0, 41.72727272727273], [113.0, 58.20930232558138], [114.0, 989.7379310344835], [115.0, 49.11111111111111], [116.0, 39.740740740740726], [117.0, 53.19999999999999], [118.0, 48.50877192982456], [119.0, 66.8529411764706], [120.0, 1318.0769230769226], [121.0, 55.239999999999995], [122.0, 44.8125], [123.0, 1045.1034482758623], [124.0, 45.31081081081081], [125.0, 58.06666666666666], [126.0, 1333.2884615384614], [127.0, 60.76470588235294], [128.0, 810.8860759493671], [130.0, 53.666666666666664], [131.0, 878.5481481481482], [132.0, 66.15384615384616], [133.0, 49.62222222222221], [134.0, 41.8], [135.0, 795.2307692307693], [129.0, 39.66666666666667], [136.0, 47.83333333333333], [137.0, 52.805970149253724], [138.0, 1361.1470588235293], [139.0, 380.4255319148936], [140.0, 65.58333333333333], [141.0, 64.55555555555556], [143.0, 1520.4883720930234], [142.0, 39.1764705882353], [144.0, 42.11764705882353], [145.0, 315.3518518518519], [146.0, 62.181818181818194], [147.0, 98.52499999999998], [148.0, 61.0], [150.0, 55.1636363636364], [151.0, 402.0416666666666], [149.0, 1129.761194029851], [152.0, 1848.6666666666667], [153.0, 69.24999999999997], [154.0, 109.4], [155.0, 645.2051282051283], [156.0, 61.615384615384606], [157.0, 88.375], [158.0, 68.99999999999999], [159.0, 55.147058823529406], [160.0, 1711.0975609756092], [161.0, 319.6031746031746], [162.0, 96.33333333333333], [163.0, 86.2], [165.0, 77.08163265306123], [166.0, 2050.555555555555], [167.0, 82.13793103448276], [164.0, 1583.9830508474572], [168.0, 221.14285714285717], [169.0, 133.47058823529412], [170.0, 50.769230769230774], [171.0, 119.7105263157895], [172.0, 66.16666666666667], [173.0, 109.48148148148151], [174.0, 142.67391304347834], [175.0, 128.24242424242422], [176.0, 1749.722222222222], [177.0, 520.9846153846157], [178.0, 212.32758620689654], [180.0, 291.9275362318841], [181.0, 714.5641025641024], [182.0, 133.25], [183.0, 176.25], [179.0, 58.07142857142857], [184.0, 735.7750000000003], [185.0, 290.55072463768124], [186.0, 65.75], [187.0, 77.6153846153846], [188.0, 51.19780219780222], [189.0, 53.10169491525425], [190.0, 683.1549295774648], [191.0, 829.6263736263736], [192.0, 822.5098039215684], [193.0, 830.8495575221235], [194.0, 355.85], [195.0, 604.0357142857143], [196.0, 58.45454545454545], [197.0, 400.91111111111115], [199.0, 359.5128205128206], [198.0, 643.6], [200.0, 45.785714285714285], [201.0, 3577.588235294118], [202.0, 54.72222222222222], [205.0, 46.97435897435897], [206.0, 282.63235294117646], [207.0, 42.0], [204.0, 798.5692307692308], [203.0, 34.650000000000006], [208.0, 2446.9500000000007], [209.0, 64.33333333333333], [210.0, 1227.8918918918919], [211.0, 56.6896551724138], [212.0, 773.9375000000001], [213.0, 206.29411764705875], [214.0, 81.11111111111111], [215.0, 156.77142857142854], [216.0, 161.00000000000003], [217.0, 646.9655172413794], [218.0, 242.36263736263743], [219.0, 870.2424242424242], [220.0, 136.16666666666669], [221.0, 329.5535714285714], [222.0, 603.8947368421054], [223.0, 324.3173652694608], [224.0, 1032.2368421052633], [225.0, 38.57142857142858], [226.0, 684.4946236559138], [227.0, 551.1470588235295], [228.0, 1587.65], [229.0, 1469.94], [230.0, 51.48571428571428], [231.0, 45.08333333333333], [232.0, 633.5409836065572], [233.0, 89.3076923076923], [234.0, 217.00000000000003], [235.0, 147.73333333333335], [236.0, 1374.4857142857145], [237.0, 124.99999999999994], [238.0, 1252.5789473684213], [239.0, 336.6610169491525], [240.0, 376.00000000000006], [241.0, 102.33333333333334], [242.0, 406.95238095238113], [243.0, 539.2380952380953], [244.0, 66.00000000000001], [245.0, 1500.7], [246.0, 45.63636363636363], [247.0, 40.73684210526316], [248.0, 978.7272727272729], [249.0, 650.3571428571428], [250.0, 1886.375], [251.0, 73.51724137931033], [252.0, 101.07692307692307], [253.0, 1014.0], [254.0, 190.35999999999996], [255.0, 2728.263157894737], [257.0, 388.25], [256.0, 261.6944444444445], [258.0, 434.10526315789474], [259.0, 165.5357142857142], [260.0, 400.8229166666667], [261.0, 237.5], [262.0, 187.0], [263.0, 138.72222222222223], [264.0, 1604.9210526315792], [270.0, 57.160000000000004], [271.0, 69.10526315789474], [268.0, 80.63999999999999], [269.0, 103.31578947368422], [265.0, 724.7777777777778], [266.0, 782.2197802197802], [267.0, 1212.2608695652175], [273.0, 102.25000000000001], [272.0, 310.04166666666663], [274.0, 368.99999999999994], [275.0, 392.2666666666667], [276.0, 242.28205128205127], [277.0, 1008.9166666666669], [278.0, 186.84848484848484], [279.0, 148.86666666666665], [280.0, 216.09523809523807], [286.0, 42.72413793103449], [287.0, 75.79999999999998], [284.0, 81.5], [285.0, 406.9574468085106], [281.0, 73.54545454545456], [282.0, 543.5178571428572], [283.0, 122.22222222222223], [289.0, 105.55172413793107], [288.0, 82.80769230769229], [290.0, 1397.6333333333334], [291.0, 101.44444444444447], [292.0, 164.21739130434779], [293.0, 64.97435897435895], [294.0, 338.8709677419355], [295.0, 298.8461538461539], [296.0, 292.42857142857144], [302.0, 93.85714285714288], [303.0, 129.61111111111111], [300.0, 263.695652173913], [301.0, 192.55813953488374], [297.0, 303.2272727272727], [298.0, 1580.727272727273], [299.0, 269.4444444444445], [305.0, 495.5882352941176], [304.0, 199.57142857142856], [306.0, 74.76666666666668], [307.0, 179.29999999999998], [308.0, 147.86363636363643], [309.0, 73.56521739130437], [310.0, 133.74074074074073], [311.0, 287.423076923077], [312.0, 174.16666666666663], [318.0, 249.09677419354844], [319.0, 120.4736842105263], [316.0, 197.95833333333337], [317.0, 201.1666666666667], [313.0, 201.73913043478257], [314.0, 212.3913043478261], [315.0, 88.05], [321.0, 1076.8857142857141], [320.0, 339.61538461538464], [322.0, 637.7352941176468], [323.0, 1147.095238095238], [324.0, 168.53333333333333], [325.0, 88.07999999999997], [326.0, 281.3076923076923], [327.0, 171.68965517241384], [328.0, 732.7619047619049], [334.0, 209.66666666666669], [335.0, 247.17073170731732], [332.0, 278.5], [333.0, 204.99999999999997], [329.0, 371.925925925926], [330.0, 226.66666666666666], [331.0, 1247.72], [337.0, 555.05], [336.0, 291.9444444444445], [338.0, 115.45454545454545], [339.0, 1097.328571428571], [340.0, 631.7931034482759], [341.0, 132.87272727272725], [342.0, 220.325], [343.0, 1279.4999999999998], [344.0, 149.65384615384616], [350.0, 254.054054054054], [351.0, 243.18749999999994], [348.0, 457.5], [349.0, 434.8125], [345.0, 159.71428571428572], [346.0, 413.26086956521743], [347.0, 149.23529411764707], [353.0, 287.07142857142856], [352.0, 885.8636363636364], [354.0, 91.66129032258065], [355.0, 39.75], [356.0, 280.3599999999999], [357.0, 135.4090909090909], [358.0, 588.1111111111111], [359.0, 204.17391304347828], [360.0, 207.61904761904762], [366.0, 451.26666666666665], [367.0, 195.24137931034483], [364.0, 559.2280701754387], [365.0, 162.8181818181818], [361.0, 180.75000000000003], [362.0, 79.33333333333331], [363.0, 301.91304347826093], [369.0, 793.404761904762], [368.0, 975.7727272727276], [370.0, 192.04166666666663], [371.0, 121.12500000000001], [372.0, 276.29999999999995], [373.0, 202.00000000000003], [374.0, 238.25000000000003], [375.0, 122.86956521739128], [376.0, 276.7209302325581], [382.0, 149.0625], [383.0, 371.7647058823529], [380.0, 266.08333333333337], [381.0, 227.0], [377.0, 150.72727272727272], [378.0, 441.7111111111111], [379.0, 298.71999999999997], [385.0, 170.92], [384.0, 413.7692307692308], [386.0, 189.06666666666663], [387.0, 309.906976744186], [388.0, 174.1136363636363], [389.0, 424.6756756756758], [390.0, 385.8571428571429], [391.0, 191.40476190476187], [392.0, 203.66666666666666], [398.0, 295.88888888888897], [399.0, 191.6274509803922], [396.0, 157.7669902912621], [397.0, 516.3103448275862], [393.0, 123.13333333333334], [394.0, 411.40000000000003], [395.0, 445.37931034482756], [401.0, 168.79999999999998], [400.0, 594.0526315789474], [402.0, 174.0952380952381], [403.0, 266.8235294117647], [404.0, 134.5], [405.0, 683.5652173913044], [406.0, 278.2105263157895], [407.0, 147.93333333333337], [408.0, 203.69047619047623], [414.0, 952.2285714285713], [415.0, 294.65517241379314], [412.0, 436.22222222222223], [413.0, 239.10714285714283], [409.0, 409.9230769230769], [410.0, 474.3888888888888], [411.0, 205.23809523809524], [417.0, 540.595744680851], [416.0, 129.32432432432427], [418.0, 339.74999999999994], [419.0, 229.72727272727275], [420.0, 1120.409090909091], [421.0, 141.10000000000002], [422.0, 197.0344827586207], [423.0, 832.5454545454545], [424.0, 535.7], [430.0, 196.44827586206898], [431.0, 340.49999999999994], [428.0, 333.7647058823529], [429.0, 157.22727272727272], [425.0, 370.8481012658227], [426.0, 255.99999999999994], [427.0, 209.52], [433.0, 235.08333333333331], [432.0, 411.9464285714285], [434.0, 287.48275862068965], [435.0, 138.5], [436.0, 173.92857142857144], [437.0, 154.3], [438.0, 601.1875], [439.0, 196.1578947368421], [440.0, 284.7142857142857], [446.0, 272.65040650406513], [447.0, 384.86666666666673], [444.0, 220.6571428571429], [445.0, 484.01754385964915], [441.0, 212.87499999999997], [442.0, 309.2222222222223], [443.0, 186.4761904761905], [449.0, 175.5769230769231], [448.0, 419.1538461538462], [450.0, 891.2500000000001], [451.0, 698.1627906976743], [452.0, 337.14705882352945], [453.0, 612.5], [454.0, 231.79411764705884], [455.0, 285.95652173913044], [456.0, 255.4736842105264], [462.0, 388.30555555555554], [463.0, 214.14285714285714], [460.0, 305.4545454545453], [461.0, 330.65624999999994], [457.0, 483.0000000000001], [458.0, 142.42857142857144], [459.0, 488.07142857142856], [465.0, 217.80952380952385], [464.0, 271.8571428571428], [466.0, 288.76923076923083], [467.0, 998.421052631579], [468.0, 452.25], [469.0, 262.92000000000013], [470.0, 78.16666666666667], [471.0, 257.25000000000006], [472.0, 330.8571428571429], [478.0, 191.5238095238095], [479.0, 243.11904761904754], [476.0, 179.56756756756758], [477.0, 394.56756756756766], [473.0, 436.89247311827967], [474.0, 207.45000000000002], [475.0, 711.15625], [481.0, 332.34285714285716], [480.0, 223.99999999999997], [482.0, 386.77966101694915], [483.0, 186.5], [484.0, 531.6153846153848], [485.0, 306.27868852459005], [486.0, 315.5769230769231], [487.0, 390.34782608695656], [488.0, 384.5909090909092], [494.0, 345.625], [495.0, 385.5357142857142], [492.0, 215.7142857142857], [493.0, 329.3076923076923], [489.0, 195.29166666666669], [490.0, 200.26315789473682], [491.0, 213.05714285714294], [497.0, 245.50000000000003], [496.0, 571.1627906976743], [498.0, 1086.521739130435], [499.0, 230.8846153846154], [500.0, 608.5454545454546], [501.0, 175.06250000000003], [502.0, 385.71929824561397], [503.0, 147.969696969697], [504.0, 346.14285714285705], [510.0, 401.63551401869154], [511.0, 553.0], [508.0, 146.25], [509.0, 279.5185185185186], [505.0, 374.96491228070175], [506.0, 686.3333333333334], [507.0, 538.3928571428571], [515.0, 412.33333333333337], [512.0, 504.65957446808517], [526.0, 441.5], [527.0, 345.3125], [524.0, 322.0], [525.0, 185.56250000000003], [522.0, 538.8235294117646], [523.0, 735.6190476190477], [513.0, 260.4838709677419], [514.0, 435.7981651376146], [516.0, 236.0526315789474], [517.0, 432.88888888888886], [518.0, 745.0], [519.0, 308.8823529411765], [528.0, 544.1], [542.0, 881.2058823529412], [543.0, 342.6964285714285], [540.0, 539.0], [541.0, 382.2400000000001], [538.0, 843.2452830188678], [539.0, 719.8936170212763], [536.0, 365.58536585365863], [537.0, 1000.4482758620688], [529.0, 389.671875], [530.0, 254.3111111111111], [531.0, 613.5333333333332], [532.0, 404.2666666666666], [533.0, 266.9375], [534.0, 249.56756756756755], [535.0, 677.8425925925926], [520.0, 173.93243243243245], [521.0, 388.99999999999994], [547.0, 930.5], [544.0, 331.28846153846155], [558.0, 415.63157894736844], [559.0, 322.5625], [556.0, 479.56944444444446], [557.0, 476.98387096774206], [554.0, 521.5769230769231], [555.0, 668.6111111111113], [545.0, 480.0909090909091], [546.0, 1130.6315789473683], [548.0, 804.4736842105262], [549.0, 591.5624999999999], [550.0, 233.32075471698104], [551.0, 1184.214285714286], [560.0, 870.8571428571427], [574.0, 274.9310344827585], [575.0, 644.8199999999999], [572.0, 131.5625], [573.0, 728.5423728813561], [570.0, 903.0204081632651], [571.0, 514.0851063829787], [568.0, 512.0588235294117], [569.0, 156.2941176470588], [561.0, 736.9499999999999], [562.0, 603.7586206896551], [563.0, 528.1858407079646], [564.0, 279.1304347826087], [565.0, 476.3218390804598], [566.0, 266.37500000000006], [567.0, 429.07476635514035], [552.0, 743.0], [553.0, 630.8684210526318], [579.0, 646.2280701754388], [576.0, 363.43749999999994], [590.0, 601.1538461538461], [591.0, 294.71666666666664], [588.0, 327.2692307692308], [589.0, 656.3589743589744], [586.0, 742.5454545454544], [587.0, 526.8000000000001], [577.0, 358.7941176470588], [578.0, 379.7837837837838], [580.0, 317.97058823529414], [581.0, 588.4285714285716], [582.0, 347.1333333333334], [583.0, 321.8723404255319], [592.0, 543.8913043478262], [606.0, 710.9404761904761], [607.0, 591.9076923076924], [604.0, 756.014705882353], [605.0, 694.5087719298244], [602.0, 648.7804878048782], [603.0, 561.939393939394], [600.0, 332.15], [601.0, 512.5238095238095], [593.0, 489.10416666666674], [594.0, 902.8999999999996], [595.0, 1280.4285714285718], [596.0, 503.3448275862069], [597.0, 626.3647058823526], [598.0, 1116.8333333333333], [599.0, 836.9062500000001], [584.0, 297.56250000000006], [585.0, 441.7315436241613], [611.0, 302.33333333333337], [608.0, 149.8181818181818], [622.0, 883.0799999999999], [623.0, 358.2], [620.0, 226.92857142857144], [621.0, 600.5384615384617], [618.0, 720.4358974358975], [619.0, 579.4166666666666], [609.0, 464.1348314606741], [610.0, 384.5333333333333], [612.0, 683.0588235294118], [613.0, 389.84337349397583], [614.0, 768.7058823529411], [615.0, 347.48571428571427], [624.0, 1423.1250000000002], [638.0, 607.12], [639.0, 362.1095890410959], [636.0, 473.40677966101697], [637.0, 601.9482758620691], [634.0, 1123.3292682926829], [635.0, 384.68], [632.0, 264.76712328767127], [633.0, 637.1666666666667], [625.0, 546.9599999999998], [626.0, 300.18518518518516], [627.0, 362.07692307692304], [628.0, 614.7222222222223], [629.0, 358.96153846153834], [630.0, 479.2972972972973], [631.0, 338.1509433962265], [616.0, 625.6235294117646], [617.0, 549.2702702702702], [646.0, 694.95], [642.0, 290.2413793103448], [640.0, 161.3571428571429], [654.0, 939.3333333333334], [655.0, 597.4], [652.0, 723.7999999999998], [653.0, 401.2142857142857], [650.0, 346.469387755102], [651.0, 803.7391304347825], [643.0, 864.2424242424242], [644.0, 429.186440677966], [645.0, 785.9444444444445], [647.0, 738.0978260869565], [664.0, 1126.5000000000005], [665.0, 810.6836734693874], [666.0, 361.49999999999994], [667.0, 204.75000000000003], [668.0, 789.8749999999998], [669.0, 714.5454545454546], [670.0, 409.01562499999983], [671.0, 412.00000000000006], [656.0, 720.3783783783783], [657.0, 337.5208333333334], [658.0, 492.97142857142853], [660.0, 529.5945945945946], [661.0, 603.2857142857143], [662.0, 890.3157894736844], [663.0, 928.6363636363635], [648.0, 1009.08], [649.0, 604.311320754717], [675.0, 520.5], [672.0, 196.875], [686.0, 1091.0800000000002], [687.0, 505.1562500000002], [684.0, 623.1833333333333], [685.0, 536.3517587939695], [682.0, 561.1847826086955], [683.0, 473.19587628865975], [673.0, 100.66666666666666], [674.0, 614.5890410958905], [676.0, 582.4854368932035], [677.0, 792.6315789473683], [678.0, 229.96666666666667], [679.0, 323.6666666666667], [688.0, 281.0476190476191], [702.0, 787.3333333333334], [703.0, 576.2534246575343], [700.0, 873.8000000000002], [701.0, 375.53571428571433], [698.0, 1020.8367346938778], [699.0, 959.7307692307692], [696.0, 808.5000000000001], [697.0, 871.4722222222221], [689.0, 419.4666666666665], [690.0, 506.18749999999994], [691.0, 903.8055555555553], [692.0, 280.88888888888886], [693.0, 528.6521739130437], [694.0, 392.9000000000001], [695.0, 425.4174757281554], [680.0, 530.4528301886794], [681.0, 605.1923076923076], [707.0, 563.4285714285717], [704.0, 1090.7196261682247], [718.0, 816.7085427135679], [719.0, 622.9714285714284], [716.0, 405.05555555555554], [717.0, 837.8699999999998], [714.0, 293.0869565217392], [715.0, 793.7543859649119], [705.0, 424.87500000000006], [706.0, 264.92307692307696], [708.0, 335.9512195121952], [709.0, 506.7105263157895], [710.0, 533.1499999999999], [711.0, 602.029411764706], [720.0, 677.2444444444446], [734.0, 260.7692307692307], [735.0, 845.0250000000001], [732.0, 785.668874172185], [733.0, 1219.3125], [730.0, 704.0894736842104], [731.0, 751.6486486486485], [728.0, 573.0881226053643], [729.0, 518.3797468354431], [721.0, 323.1176470588236], [722.0, 774.2103174603174], [723.0, 203.41666666666666], [724.0, 813.8645833333334], [725.0, 561.686046511628], [726.0, 350.0769230769231], [727.0, 423.26966292134847], [712.0, 668.5877862595421], [713.0, 1175.421875], [739.0, 841.1621621621621], [736.0, 856.3000000000001], [750.0, 446.9235880398671], [751.0, 621.2582781456956], [748.0, 580.2944444444443], [749.0, 682.2857142857143], [746.0, 418.24528301886795], [747.0, 558.8674698795179], [737.0, 955.5652173913048], [738.0, 647.96875], [740.0, 588.6544342507646], [741.0, 796.7261663286001], [742.0, 243.6515151515152], [743.0, 669.1999999999997], [752.0, 445.81171548117135], [766.0, 406.4220779220779], [767.0, 662.9589041095894], [764.0, 636.6999999999999], [765.0, 403.16981132075483], [762.0, 737.8499999999998], [763.0, 729.8000000000001], [760.0, 573.6858638743457], [761.0, 482.92], [753.0, 644.3958333333335], [754.0, 467.9924812030076], [755.0, 473.42415730337115], [756.0, 619.8976377952749], [757.0, 306.87500000000006], [758.0, 592.1302681992338], [759.0, 856.9650655021833], [744.0, 342.31250000000006], [745.0, 636.6614853195167], [771.0, 417.9444444444444], [768.0, 641.4285714285714], [778.0, 565.0937500000005], [779.0, 452.23947368421057], [769.0, 664.694725028058], [770.0, 871.5714285714283], [772.0, 727.8395721925131], [773.0, 703.6449771689499], [774.0, 397.45161290322585], [775.0, 1076.9186991869917], [776.0, 637.4605809128622], [777.0, 558.7764127764132], [1.0, 18698.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[485.6686249999977, 539.2032249999996]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 779.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.57669554E12, "maxY": 428767.8333333333, "series": [{"data": [[1.57669554E12, 428767.8333333333], [1.5766956E12, 11898.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57669554E12, 0.0], [1.5766956E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5766956E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 529.0779547790338, "minX": 1.57669554E12, "maxY": 904.0879629629637, "series": [{"data": [[1.57669554E12, 529.0779547790338], [1.5766956E12, 904.0879629629637]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5766956E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 528.9059095580702, "minX": 1.57669554E12, "maxY": 904.0833333333344, "series": [{"data": [[1.57669554E12, 528.9059095580702], [1.5766956E12, 904.0833333333344]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5766956E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.57669554E12, "maxY": 4.9E-324, "series": [{"data": [[1.57669554E12, 0.0], [1.5766956E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5766956E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 29.0, "minX": 1.57669554E12, "maxY": 56011.0, "series": [{"data": [[1.57669554E12, 33524.0], [1.5766956E12, 56011.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57669554E12, 29.0], [1.5766956E12, 30.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57669554E12, 753.0], [1.5766956E12, 43.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57669554E12, 15398.970000000005], [1.5766956E12, 30176.590000000004]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57669554E12, 1908.9500000000007], [1.5766956E12, 49.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5766956E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 33.0, "minX": 3.0, "maxY": 268.0, "series": [{"data": [[624.0, 40.0], [640.0, 39.0], [676.0, 39.0], [758.0, 39.0], [3.0, 42.0], [802.0, 38.0], [894.0, 263.0], [901.0, 267.0], [902.0, 45.0], [906.0, 48.0], [905.0, 54.0], [904.0, 101.5], [900.0, 265.0], [903.0, 268.0], [907.0, 50.5], [909.0, 47.0], [911.0, 41.0], [896.0, 261.0], [919.0, 267.0], [917.0, 44.0], [918.0, 88.5], [912.0, 107.5], [924.0, 40.0], [923.0, 42.0], [921.0, 40.0], [913.0, 43.0], [914.0, 42.0], [915.0, 39.0], [916.0, 44.5], [956.0, 40.0], [991.0, 54.0], [1227.0, 50.0], [83.0, 39.0], [1413.0, 75.0], [7.0, 37.0], [155.0, 40.0], [153.0, 36.0], [11.0, 34.0], [206.0, 36.0], [13.0, 33.0], [247.0, 38.0], [296.0, 41.0], [300.0, 41.0], [315.0, 37.0], [20.0, 38.5], [22.0, 37.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1413.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 33.0, "minX": 3.0, "maxY": 268.0, "series": [{"data": [[624.0, 40.0], [640.0, 39.0], [676.0, 39.0], [758.0, 39.0], [3.0, 42.0], [802.0, 38.0], [894.0, 263.0], [901.0, 267.0], [902.0, 44.0], [906.0, 48.0], [905.0, 54.0], [904.0, 99.5], [900.0, 265.0], [903.0, 268.0], [907.0, 50.0], [909.0, 47.0], [911.0, 41.0], [896.0, 261.0], [919.0, 267.0], [917.0, 44.0], [918.0, 88.5], [912.0, 107.5], [924.0, 40.0], [923.0, 42.0], [921.0, 40.0], [913.0, 43.0], [914.0, 42.0], [915.0, 39.0], [916.0, 44.5], [956.0, 40.0], [991.0, 54.0], [1227.0, 50.0], [83.0, 39.0], [1413.0, 75.0], [7.0, 37.0], [155.0, 40.0], [153.0, 36.0], [11.0, 34.0], [206.0, 36.0], [13.0, 33.0], [247.0, 38.0], [296.0, 41.0], [300.0, 41.0], [315.0, 37.0], [20.0, 38.5], [22.0, 37.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1413.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 17.2, "minX": 1.57669554E12, "maxY": 649.4666666666667, "series": [{"data": [[1.57669554E12, 649.4666666666667], [1.5766956E12, 17.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5766956E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 18.0, "minX": 1.57669554E12, "maxY": 648.6666666666666, "series": [{"data": [[1.57669554E12, 648.6666666666666], [1.5766956E12, 18.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5766956E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 18.0, "minX": 1.57669554E12, "maxY": 648.6666666666666, "series": [{"data": [[1.57669554E12, 648.6666666666666], [1.5766956E12, 18.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5766956E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 18.0, "minX": 1.57669554E12, "maxY": 648.6666666666666, "series": [{"data": [[1.57669554E12, 648.6666666666666], [1.5766956E12, 18.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5766956E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

