/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 30.0, "minX": 0.0, "maxY": 23838.0, "series": [{"data": [[0.0, 30.0], [0.1, 31.0], [0.2, 31.0], [0.3, 32.0], [0.4, 32.0], [0.5, 32.0], [0.6, 33.0], [0.7, 33.0], [0.8, 33.0], [0.9, 33.0], [1.0, 34.0], [1.1, 34.0], [1.2, 34.0], [1.3, 34.0], [1.4, 34.0], [1.5, 34.0], [1.6, 34.0], [1.7, 35.0], [1.8, 35.0], [1.9, 35.0], [2.0, 35.0], [2.1, 35.0], [2.2, 35.0], [2.3, 35.0], [2.4, 35.0], [2.5, 35.0], [2.6, 36.0], [2.7, 36.0], [2.8, 36.0], [2.9, 36.0], [3.0, 36.0], [3.1, 36.0], [3.2, 36.0], [3.3, 36.0], [3.4, 36.0], [3.5, 36.0], [3.6, 36.0], [3.7, 36.0], [3.8, 36.0], [3.9, 36.0], [4.0, 36.0], [4.1, 36.0], [4.2, 37.0], [4.3, 37.0], [4.4, 37.0], [4.5, 37.0], [4.6, 37.0], [4.7, 37.0], [4.8, 37.0], [4.9, 37.0], [5.0, 37.0], [5.1, 37.0], [5.2, 37.0], [5.3, 37.0], [5.4, 37.0], [5.5, 37.0], [5.6, 38.0], [5.7, 38.0], [5.8, 38.0], [5.9, 38.0], [6.0, 38.0], [6.1, 38.0], [6.2, 38.0], [6.3, 38.0], [6.4, 38.0], [6.5, 38.0], [6.6, 38.0], [6.7, 38.0], [6.8, 38.0], [6.9, 38.0], [7.0, 38.0], [7.1, 39.0], [7.2, 39.0], [7.3, 39.0], [7.4, 39.0], [7.5, 39.0], [7.6, 39.0], [7.7, 39.0], [7.8, 39.0], [7.9, 39.0], [8.0, 39.0], [8.1, 39.0], [8.2, 39.0], [8.3, 39.0], [8.4, 39.0], [8.5, 39.0], [8.6, 39.0], [8.7, 39.0], [8.8, 39.0], [8.9, 40.0], [9.0, 40.0], [9.1, 40.0], [9.2, 40.0], [9.3, 40.0], [9.4, 40.0], [9.5, 40.0], [9.6, 40.0], [9.7, 40.0], [9.8, 40.0], [9.9, 40.0], [10.0, 40.0], [10.1, 40.0], [10.2, 40.0], [10.3, 40.0], [10.4, 40.0], [10.5, 40.0], [10.6, 41.0], [10.7, 41.0], [10.8, 41.0], [10.9, 41.0], [11.0, 41.0], [11.1, 41.0], [11.2, 41.0], [11.3, 41.0], [11.4, 41.0], [11.5, 41.0], [11.6, 41.0], [11.7, 41.0], [11.8, 41.0], [11.9, 41.0], [12.0, 41.0], [12.1, 41.0], [12.2, 41.0], [12.3, 41.0], [12.4, 42.0], [12.5, 42.0], [12.6, 42.0], [12.7, 42.0], [12.8, 42.0], [12.9, 42.0], [13.0, 42.0], [13.1, 42.0], [13.2, 42.0], [13.3, 42.0], [13.4, 42.0], [13.5, 42.0], [13.6, 42.0], [13.7, 42.0], [13.8, 42.0], [13.9, 42.0], [14.0, 43.0], [14.1, 43.0], [14.2, 43.0], [14.3, 43.0], [14.4, 43.0], [14.5, 43.0], [14.6, 43.0], [14.7, 43.0], [14.8, 43.0], [14.9, 43.0], [15.0, 43.0], [15.1, 43.0], [15.2, 43.0], [15.3, 43.0], [15.4, 43.0], [15.5, 44.0], [15.6, 44.0], [15.7, 44.0], [15.8, 44.0], [15.9, 44.0], [16.0, 44.0], [16.1, 44.0], [16.2, 44.0], [16.3, 44.0], [16.4, 44.0], [16.5, 44.0], [16.6, 44.0], [16.7, 44.0], [16.8, 44.0], [16.9, 44.0], [17.0, 45.0], [17.1, 45.0], [17.2, 45.0], [17.3, 45.0], [17.4, 45.0], [17.5, 45.0], [17.6, 45.0], [17.7, 45.0], [17.8, 45.0], [17.9, 45.0], [18.0, 45.0], [18.1, 45.0], [18.2, 45.0], [18.3, 45.0], [18.4, 45.0], [18.5, 45.0], [18.6, 46.0], [18.7, 46.0], [18.8, 46.0], [18.9, 46.0], [19.0, 46.0], [19.1, 46.0], [19.2, 46.0], [19.3, 46.0], [19.4, 46.0], [19.5, 46.0], [19.6, 46.0], [19.7, 46.0], [19.8, 46.0], [19.9, 46.0], [20.0, 46.0], [20.1, 47.0], [20.2, 47.0], [20.3, 47.0], [20.4, 47.0], [20.5, 47.0], [20.6, 47.0], [20.7, 47.0], [20.8, 47.0], [20.9, 47.0], [21.0, 47.0], [21.1, 47.0], [21.2, 47.0], [21.3, 47.0], [21.4, 47.0], [21.5, 47.0], [21.6, 47.0], [21.7, 48.0], [21.8, 48.0], [21.9, 48.0], [22.0, 48.0], [22.1, 48.0], [22.2, 48.0], [22.3, 48.0], [22.4, 48.0], [22.5, 48.0], [22.6, 48.0], [22.7, 48.0], [22.8, 48.0], [22.9, 48.0], [23.0, 48.0], [23.1, 49.0], [23.2, 49.0], [23.3, 49.0], [23.4, 49.0], [23.5, 49.0], [23.6, 49.0], [23.7, 49.0], [23.8, 49.0], [23.9, 49.0], [24.0, 49.0], [24.1, 49.0], [24.2, 49.0], [24.3, 49.0], [24.4, 49.0], [24.5, 49.0], [24.6, 50.0], [24.7, 50.0], [24.8, 50.0], [24.9, 50.0], [25.0, 50.0], [25.1, 50.0], [25.2, 50.0], [25.3, 50.0], [25.4, 50.0], [25.5, 50.0], [25.6, 50.0], [25.7, 50.0], [25.8, 50.0], [25.9, 50.0], [26.0, 51.0], [26.1, 51.0], [26.2, 51.0], [26.3, 51.0], [26.4, 51.0], [26.5, 51.0], [26.6, 51.0], [26.7, 51.0], [26.8, 51.0], [26.9, 51.0], [27.0, 51.0], [27.1, 51.0], [27.2, 51.0], [27.3, 51.0], [27.4, 52.0], [27.5, 52.0], [27.6, 52.0], [27.7, 52.0], [27.8, 52.0], [27.9, 52.0], [28.0, 52.0], [28.1, 52.0], [28.2, 52.0], [28.3, 52.0], [28.4, 52.0], [28.5, 52.0], [28.6, 52.0], [28.7, 52.0], [28.8, 53.0], [28.9, 53.0], [29.0, 53.0], [29.1, 53.0], [29.2, 53.0], [29.3, 53.0], [29.4, 53.0], [29.5, 53.0], [29.6, 53.0], [29.7, 53.0], [29.8, 53.0], [29.9, 53.0], [30.0, 53.0], [30.1, 53.0], [30.2, 54.0], [30.3, 54.0], [30.4, 54.0], [30.5, 54.0], [30.6, 54.0], [30.7, 54.0], [30.8, 54.0], [30.9, 54.0], [31.0, 54.0], [31.1, 54.0], [31.2, 54.0], [31.3, 54.0], [31.4, 55.0], [31.5, 55.0], [31.6, 55.0], [31.7, 55.0], [31.8, 55.0], [31.9, 55.0], [32.0, 55.0], [32.1, 55.0], [32.2, 55.0], [32.3, 55.0], [32.4, 55.0], [32.5, 56.0], [32.6, 56.0], [32.7, 56.0], [32.8, 56.0], [32.9, 56.0], [33.0, 56.0], [33.1, 56.0], [33.2, 56.0], [33.3, 56.0], [33.4, 56.0], [33.5, 57.0], [33.6, 57.0], [33.7, 57.0], [33.8, 57.0], [33.9, 57.0], [34.0, 57.0], [34.1, 57.0], [34.2, 57.0], [34.3, 58.0], [34.4, 58.0], [34.5, 58.0], [34.6, 58.0], [34.7, 58.0], [34.8, 58.0], [34.9, 58.0], [35.0, 58.0], [35.1, 59.0], [35.2, 59.0], [35.3, 59.0], [35.4, 59.0], [35.5, 59.0], [35.6, 59.0], [35.7, 59.0], [35.8, 59.0], [35.9, 60.0], [36.0, 60.0], [36.1, 60.0], [36.2, 60.0], [36.3, 60.0], [36.4, 60.0], [36.5, 60.0], [36.6, 60.0], [36.7, 61.0], [36.8, 61.0], [36.9, 61.0], [37.0, 61.0], [37.1, 61.0], [37.2, 61.0], [37.3, 61.0], [37.4, 61.0], [37.5, 62.0], [37.6, 62.0], [37.7, 62.0], [37.8, 62.0], [37.9, 62.0], [38.0, 62.0], [38.1, 63.0], [38.2, 63.0], [38.3, 63.0], [38.4, 63.0], [38.5, 63.0], [38.6, 63.0], [38.7, 64.0], [38.8, 64.0], [38.9, 64.0], [39.0, 64.0], [39.1, 64.0], [39.2, 64.0], [39.3, 65.0], [39.4, 65.0], [39.5, 65.0], [39.6, 65.0], [39.7, 65.0], [39.8, 66.0], [39.9, 66.0], [40.0, 66.0], [40.1, 66.0], [40.2, 66.0], [40.3, 66.0], [40.4, 67.0], [40.5, 67.0], [40.6, 67.0], [40.7, 67.0], [40.8, 67.0], [40.9, 68.0], [41.0, 68.0], [41.1, 68.0], [41.2, 68.0], [41.3, 68.0], [41.4, 69.0], [41.5, 69.0], [41.6, 69.0], [41.7, 69.0], [41.8, 70.0], [41.9, 70.0], [42.0, 70.0], [42.1, 70.0], [42.2, 70.0], [42.3, 71.0], [42.4, 71.0], [42.5, 71.0], [42.6, 71.0], [42.7, 72.0], [42.8, 72.0], [42.9, 72.0], [43.0, 72.0], [43.1, 73.0], [43.2, 73.0], [43.3, 73.0], [43.4, 73.0], [43.5, 74.0], [43.6, 74.0], [43.7, 74.0], [43.8, 74.0], [43.9, 75.0], [44.0, 75.0], [44.1, 75.0], [44.2, 76.0], [44.3, 76.0], [44.4, 76.0], [44.5, 76.0], [44.6, 77.0], [44.7, 77.0], [44.8, 77.0], [44.9, 78.0], [45.0, 78.0], [45.1, 78.0], [45.2, 78.0], [45.3, 79.0], [45.4, 79.0], [45.5, 80.0], [45.6, 80.0], [45.7, 81.0], [45.8, 81.0], [45.9, 82.0], [46.0, 82.0], [46.1, 82.0], [46.2, 83.0], [46.3, 83.0], [46.4, 84.0], [46.5, 84.0], [46.6, 84.0], [46.7, 85.0], [46.8, 86.0], [46.9, 86.0], [47.0, 86.0], [47.1, 87.0], [47.2, 87.0], [47.3, 88.0], [47.4, 88.0], [47.5, 89.0], [47.6, 89.0], [47.7, 90.0], [47.8, 90.0], [47.9, 91.0], [48.0, 92.0], [48.1, 92.0], [48.2, 93.0], [48.3, 93.0], [48.4, 94.0], [48.5, 95.0], [48.6, 95.0], [48.7, 96.0], [48.8, 97.0], [48.9, 97.0], [49.0, 98.0], [49.1, 99.0], [49.2, 100.0], [49.3, 101.0], [49.4, 101.0], [49.5, 102.0], [49.6, 102.0], [49.7, 103.0], [49.8, 104.0], [49.9, 105.0], [50.0, 105.0], [50.1, 106.0], [50.2, 107.0], [50.3, 108.0], [50.4, 109.0], [50.5, 110.0], [50.6, 111.0], [50.7, 112.0], [50.8, 113.0], [50.9, 114.0], [51.0, 115.0], [51.1, 116.0], [51.2, 117.0], [51.3, 118.0], [51.4, 119.0], [51.5, 120.0], [51.6, 121.0], [51.7, 123.0], [51.8, 124.0], [51.9, 125.0], [52.0, 126.0], [52.1, 127.0], [52.2, 128.0], [52.3, 129.0], [52.4, 130.0], [52.5, 132.0], [52.6, 133.0], [52.7, 133.0], [52.8, 135.0], [52.9, 136.0], [53.0, 137.0], [53.1, 138.0], [53.2, 140.0], [53.3, 141.0], [53.4, 143.0], [53.5, 144.0], [53.6, 146.0], [53.7, 148.0], [53.8, 150.0], [53.9, 151.0], [54.0, 152.0], [54.1, 154.0], [54.2, 155.0], [54.3, 157.0], [54.4, 158.0], [54.5, 159.0], [54.6, 161.0], [54.7, 162.0], [54.8, 163.0], [54.9, 165.0], [55.0, 166.0], [55.1, 168.0], [55.2, 169.0], [55.3, 170.0], [55.4, 172.0], [55.5, 173.0], [55.6, 174.0], [55.7, 176.0], [55.8, 177.0], [55.9, 179.0], [56.0, 181.0], [56.1, 183.0], [56.2, 184.0], [56.3, 187.0], [56.4, 189.0], [56.5, 191.0], [56.6, 193.0], [56.7, 195.0], [56.8, 197.0], [56.9, 199.0], [57.0, 202.0], [57.1, 205.0], [57.2, 206.0], [57.3, 209.0], [57.4, 211.0], [57.5, 213.0], [57.6, 216.0], [57.7, 219.0], [57.8, 221.0], [57.9, 224.0], [58.0, 227.0], [58.1, 229.0], [58.2, 231.0], [58.3, 235.0], [58.4, 239.0], [58.5, 241.0], [58.6, 243.0], [58.7, 246.0], [58.8, 248.0], [58.9, 251.0], [59.0, 254.0], [59.1, 257.0], [59.2, 261.0], [59.3, 263.0], [59.4, 265.0], [59.5, 267.0], [59.6, 268.0], [59.7, 269.0], [59.8, 270.0], [59.9, 271.0], [60.0, 272.0], [60.1, 273.0], [60.2, 273.0], [60.3, 274.0], [60.4, 275.0], [60.5, 276.0], [60.6, 277.0], [60.7, 277.0], [60.8, 278.0], [60.9, 278.0], [61.0, 279.0], [61.1, 280.0], [61.2, 280.0], [61.3, 281.0], [61.4, 281.0], [61.5, 282.0], [61.6, 283.0], [61.7, 283.0], [61.8, 284.0], [61.9, 284.0], [62.0, 285.0], [62.1, 286.0], [62.2, 286.0], [62.3, 287.0], [62.4, 288.0], [62.5, 288.0], [62.6, 289.0], [62.7, 289.0], [62.8, 290.0], [62.9, 291.0], [63.0, 292.0], [63.1, 292.0], [63.2, 293.0], [63.3, 294.0], [63.4, 295.0], [63.5, 296.0], [63.6, 297.0], [63.7, 298.0], [63.8, 299.0], [63.9, 299.0], [64.0, 300.0], [64.1, 302.0], [64.2, 302.0], [64.3, 303.0], [64.4, 304.0], [64.5, 305.0], [64.6, 306.0], [64.7, 307.0], [64.8, 309.0], [64.9, 310.0], [65.0, 311.0], [65.1, 312.0], [65.2, 313.0], [65.3, 314.0], [65.4, 315.0], [65.5, 317.0], [65.6, 318.0], [65.7, 319.0], [65.8, 321.0], [65.9, 322.0], [66.0, 324.0], [66.1, 325.0], [66.2, 327.0], [66.3, 329.0], [66.4, 331.0], [66.5, 333.0], [66.6, 335.0], [66.7, 337.0], [66.8, 339.0], [66.9, 341.0], [67.0, 343.0], [67.1, 346.0], [67.2, 348.0], [67.3, 351.0], [67.4, 353.0], [67.5, 354.0], [67.6, 356.0], [67.7, 359.0], [67.8, 361.0], [67.9, 363.0], [68.0, 366.0], [68.1, 368.0], [68.2, 370.0], [68.3, 372.0], [68.4, 374.0], [68.5, 376.0], [68.6, 378.0], [68.7, 381.0], [68.8, 382.0], [68.9, 384.0], [69.0, 385.0], [69.1, 388.0], [69.2, 391.0], [69.3, 393.0], [69.4, 394.0], [69.5, 396.0], [69.6, 398.0], [69.7, 400.0], [69.8, 402.0], [69.9, 404.0], [70.0, 405.0], [70.1, 406.0], [70.2, 408.0], [70.3, 409.0], [70.4, 411.0], [70.5, 412.0], [70.6, 413.0], [70.7, 415.0], [70.8, 416.0], [70.9, 418.0], [71.0, 420.0], [71.1, 421.0], [71.2, 423.0], [71.3, 424.0], [71.4, 425.0], [71.5, 426.0], [71.6, 427.0], [71.7, 429.0], [71.8, 430.0], [71.9, 431.0], [72.0, 432.0], [72.1, 433.0], [72.2, 434.0], [72.3, 434.0], [72.4, 435.0], [72.5, 437.0], [72.6, 438.0], [72.7, 439.0], [72.8, 440.0], [72.9, 441.0], [73.0, 442.0], [73.1, 443.0], [73.2, 445.0], [73.3, 447.0], [73.4, 448.0], [73.5, 450.0], [73.6, 451.0], [73.7, 453.0], [73.8, 455.0], [73.9, 457.0], [74.0, 459.0], [74.1, 460.0], [74.2, 462.0], [74.3, 464.0], [74.4, 466.0], [74.5, 468.0], [74.6, 470.0], [74.7, 472.0], [74.8, 473.0], [74.9, 476.0], [75.0, 477.0], [75.1, 480.0], [75.2, 482.0], [75.3, 483.0], [75.4, 485.0], [75.5, 486.0], [75.6, 488.0], [75.7, 489.0], [75.8, 490.0], [75.9, 491.0], [76.0, 492.0], [76.1, 493.0], [76.2, 495.0], [76.3, 495.0], [76.4, 497.0], [76.5, 498.0], [76.6, 500.0], [76.7, 501.0], [76.8, 502.0], [76.9, 503.0], [77.0, 504.0], [77.1, 504.0], [77.2, 506.0], [77.3, 507.0], [77.4, 508.0], [77.5, 509.0], [77.6, 510.0], [77.7, 512.0], [77.8, 512.0], [77.9, 514.0], [78.0, 515.0], [78.1, 516.0], [78.2, 518.0], [78.3, 519.0], [78.4, 520.0], [78.5, 521.0], [78.6, 522.0], [78.7, 524.0], [78.8, 526.0], [78.9, 528.0], [79.0, 529.0], [79.1, 531.0], [79.2, 533.0], [79.3, 535.0], [79.4, 537.0], [79.5, 539.0], [79.6, 541.0], [79.7, 543.0], [79.8, 546.0], [79.9, 547.0], [80.0, 549.0], [80.1, 551.0], [80.2, 552.0], [80.3, 553.0], [80.4, 556.0], [80.5, 557.0], [80.6, 558.0], [80.7, 560.0], [80.8, 561.0], [80.9, 563.0], [81.0, 565.0], [81.1, 567.0], [81.2, 569.0], [81.3, 571.0], [81.4, 574.0], [81.5, 576.0], [81.6, 578.0], [81.7, 580.0], [81.8, 582.0], [81.9, 584.0], [82.0, 586.0], [82.1, 587.0], [82.2, 589.0], [82.3, 593.0], [82.4, 595.0], [82.5, 598.0], [82.6, 600.0], [82.7, 602.0], [82.8, 604.0], [82.9, 606.0], [83.0, 607.0], [83.1, 608.0], [83.2, 610.0], [83.3, 611.0], [83.4, 613.0], [83.5, 614.0], [83.6, 616.0], [83.7, 617.0], [83.8, 618.0], [83.9, 620.0], [84.0, 622.0], [84.1, 624.0], [84.2, 626.0], [84.3, 628.0], [84.4, 629.0], [84.5, 631.0], [84.6, 633.0], [84.7, 634.0], [84.8, 637.0], [84.9, 639.0], [85.0, 642.0], [85.1, 645.0], [85.2, 649.0], [85.3, 651.0], [85.4, 653.0], [85.5, 656.0], [85.6, 659.0], [85.7, 661.0], [85.8, 663.0], [85.9, 666.0], [86.0, 669.0], [86.1, 671.0], [86.2, 673.0], [86.3, 675.0], [86.4, 678.0], [86.5, 680.0], [86.6, 682.0], [86.7, 685.0], [86.8, 688.0], [86.9, 691.0], [87.0, 695.0], [87.1, 701.0], [87.2, 705.0], [87.3, 709.0], [87.4, 715.0], [87.5, 723.0], [87.6, 728.0], [87.7, 733.0], [87.8, 738.0], [87.9, 741.0], [88.0, 746.0], [88.1, 749.0], [88.2, 752.0], [88.3, 755.0], [88.4, 758.0], [88.5, 761.0], [88.6, 764.0], [88.7, 767.0], [88.8, 771.0], [88.9, 780.0], [89.0, 786.0], [89.1, 796.0], [89.2, 804.0], [89.3, 809.0], [89.4, 816.0], [89.5, 824.0], [89.6, 829.0], [89.7, 833.0], [89.8, 837.0], [89.9, 841.0], [90.0, 845.0], [90.1, 848.0], [90.2, 851.0], [90.3, 854.0], [90.4, 857.0], [90.5, 862.0], [90.6, 868.0], [90.7, 872.0], [90.8, 877.0], [90.9, 882.0], [91.0, 886.0], [91.1, 891.0], [91.2, 895.0], [91.3, 899.0], [91.4, 903.0], [91.5, 907.0], [91.6, 912.0], [91.7, 915.0], [91.8, 920.0], [91.9, 925.0], [92.0, 931.0], [92.1, 938.0], [92.2, 946.0], [92.3, 956.0], [92.4, 965.0], [92.5, 976.0], [92.6, 985.0], [92.7, 996.0], [92.8, 1005.0], [92.9, 1013.0], [93.0, 1024.0], [93.1, 1039.0], [93.2, 1048.0], [93.3, 1060.0], [93.4, 1075.0], [93.5, 1095.0], [93.6, 1117.0], [93.7, 1132.0], [93.8, 1146.0], [93.9, 1156.0], [94.0, 1177.0], [94.1, 1195.0], [94.2, 1204.0], [94.3, 1210.0], [94.4, 1217.0], [94.5, 1223.0], [94.6, 1228.0], [94.7, 1236.0], [94.8, 1244.0], [94.9, 1251.0], [95.0, 1261.0], [95.1, 1266.0], [95.2, 1278.0], [95.3, 1290.0], [95.4, 1300.0], [95.5, 1308.0], [95.6, 1319.0], [95.7, 1325.0], [95.8, 1333.0], [95.9, 1341.0], [96.0, 1352.0], [96.1, 1360.0], [96.2, 1373.0], [96.3, 1384.0], [96.4, 1398.0], [96.5, 1411.0], [96.6, 1432.0], [96.7, 1454.0], [96.8, 1472.0], [96.9, 1501.0], [97.0, 1544.0], [97.1, 1567.0], [97.2, 1606.0], [97.3, 1661.0], [97.4, 1729.0], [97.5, 1773.0], [97.6, 1815.0], [97.7, 1854.0], [97.8, 1902.0], [97.9, 1942.0], [98.0, 1990.0], [98.1, 2043.0], [98.2, 2133.0], [98.3, 2203.0], [98.4, 2304.0], [98.5, 2446.0], [98.6, 3257.0], [98.7, 3841.0], [98.8, 4454.0], [98.9, 6008.0], [99.0, 8249.0], [99.1, 13901.0], [99.2, 15872.0], [99.3, 16263.0], [99.4, 16584.0], [99.5, 17056.0], [99.6, 18047.0], [99.7, 19536.0], [99.8, 20641.0], [99.9, 21245.0], [100.0, 23838.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 12297.0, "series": [{"data": [[0.0, 12297.0], [100.0, 1932.0], [200.0, 1749.0], [300.0, 1433.0], [400.0, 1736.0], [500.0, 1495.0], [600.0, 1129.0], [700.0, 513.0], [800.0, 549.0], [900.0, 353.0], [1000.0, 190.0], [1100.0, 159.0], [1200.0, 314.0], [1300.0, 259.0], [1400.0, 115.0], [1500.0, 73.0], [1600.0, 44.0], [1700.0, 52.0], [1800.0, 56.0], [1900.0, 60.0], [2000.0, 34.0], [2100.0, 31.0], [2300.0, 19.0], [2200.0, 24.0], [2400.0, 17.0], [2500.0, 3.0], [2600.0, 2.0], [2800.0, 4.0], [2700.0, 2.0], [2900.0, 2.0], [3000.0, 2.0], [3100.0, 1.0], [3300.0, 6.0], [3200.0, 2.0], [3400.0, 5.0], [3600.0, 5.0], [3700.0, 5.0], [3800.0, 8.0], [3900.0, 10.0], [4000.0, 3.0], [4100.0, 2.0], [4300.0, 3.0], [4200.0, 1.0], [4400.0, 1.0], [4500.0, 2.0], [4600.0, 1.0], [5100.0, 3.0], [4900.0, 3.0], [5000.0, 4.0], [5200.0, 4.0], [5300.0, 3.0], [5500.0, 1.0], [5400.0, 1.0], [5900.0, 2.0], [6000.0, 3.0], [6300.0, 2.0], [6400.0, 4.0], [6500.0, 4.0], [6600.0, 1.0], [6700.0, 2.0], [6800.0, 1.0], [7000.0, 1.0], [7200.0, 1.0], [7500.0, 3.0], [7700.0, 1.0], [7800.0, 1.0], [8100.0, 1.0], [8200.0, 1.0], [8300.0, 1.0], [8700.0, 1.0], [8800.0, 1.0], [9500.0, 1.0], [10100.0, 3.0], [10000.0, 1.0], [9800.0, 3.0], [10200.0, 1.0], [10700.0, 1.0], [10300.0, 1.0], [10900.0, 1.0], [11700.0, 1.0], [11400.0, 1.0], [11800.0, 1.0], [11900.0, 2.0], [12600.0, 1.0], [13000.0, 1.0], [12900.0, 1.0], [13700.0, 1.0], [13900.0, 1.0], [14400.0, 1.0], [14800.0, 1.0], [15300.0, 1.0], [14900.0, 1.0], [15200.0, 1.0], [15100.0, 1.0], [15600.0, 3.0], [15500.0, 3.0], [15700.0, 5.0], [15800.0, 8.0], [15400.0, 3.0], [16200.0, 11.0], [16100.0, 6.0], [16300.0, 9.0], [16000.0, 4.0], [15900.0, 4.0], [16500.0, 8.0], [16700.0, 6.0], [16600.0, 7.0], [16800.0, 7.0], [16400.0, 6.0], [17100.0, 4.0], [16900.0, 1.0], [17000.0, 4.0], [17300.0, 2.0], [17200.0, 2.0], [18200.0, 6.0], [17700.0, 1.0], [17800.0, 1.0], [18000.0, 3.0], [17900.0, 5.0], [18100.0, 2.0], [17600.0, 4.0], [17500.0, 3.0], [18400.0, 2.0], [18300.0, 2.0], [18800.0, 2.0], [18500.0, 6.0], [19200.0, 1.0], [18700.0, 1.0], [18600.0, 1.0], [20000.0, 4.0], [20100.0, 3.0], [20200.0, 2.0], [20300.0, 4.0], [20400.0, 3.0], [19900.0, 2.0], [19800.0, 2.0], [19500.0, 1.0], [20600.0, 3.0], [20700.0, 2.0], [20500.0, 4.0], [21500.0, 1.0], [20900.0, 5.0], [21100.0, 4.0], [21000.0, 5.0], [20800.0, 5.0], [21300.0, 2.0], [21400.0, 1.0], [21200.0, 3.0], [22000.0, 2.0], [22300.0, 2.0], [21900.0, 1.0], [22200.0, 2.0], [21800.0, 1.0], [22400.0, 1.0], [22600.0, 1.0], [22900.0, 4.0], [22700.0, 2.0], [22800.0, 1.0], [23600.0, 1.0], [23800.0, 1.0], [23700.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 23800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 777.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 19167.0, "series": [{"data": [[0.0, 19167.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5056.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 777.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 264.79471813810903, "minX": 1.57669356E12, "maxY": 464.85472814348765, "series": [{"data": [[1.57669362E12, 264.79471813810903], [1.57669356E12, 464.85472814348765]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57669362E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 33.5, "minX": 1.0, "maxY": 6983.791666666667, "series": [{"data": [[2.0, 402.69411764705865], [3.0, 38.75], [4.0, 41.75675675675676], [5.0, 655.9999999999999], [6.0, 352.5000000000001], [7.0, 39.5], [8.0, 43.7], [9.0, 538.8125], [10.0, 59.705882352941174], [11.0, 52.75], [12.0, 46.82608695652175], [13.0, 45.111111111111114], [14.0, 45.5], [15.0, 33.5], [16.0, 97.66666666666667], [17.0, 52.666666666666664], [18.0, 63.333333333333336], [19.0, 86.35897435897435], [20.0, 165.2], [21.0, 153.0], [22.0, 188.44444444444443], [23.0, 50.16666666666667], [24.0, 57.5], [25.0, 510.8125], [26.0, 51.0], [27.0, 55.5], [28.0, 740.5], [29.0, 48.25], [30.0, 166.79999999999998], [31.0, 66.37499999999999], [32.0, 77.8], [33.0, 61.0], [34.0, 52.769230769230774], [35.0, 55.22222222222222], [36.0, 100.66666666666667], [37.0, 76.0], [38.0, 54.72727272727273], [39.0, 42.8], [40.0, 54.36363636363636], [41.0, 140.92857142857144], [42.0, 94.6], [43.0, 58.0], [44.0, 51.06666666666666], [45.0, 58.166666666666664], [47.0, 79.23076923076923], [46.0, 475.3125], [48.0, 71.84615384615384], [49.0, 42.0], [50.0, 95.57142857142857], [51.0, 109.0], [52.0, 59.06666666666667], [53.0, 69.375], [54.0, 103.5], [55.0, 45.5], [56.0, 57.5], [57.0, 62.76923076923078], [58.0, 44.09090909090909], [59.0, 225.7560975609757], [60.0, 63.6], [61.0, 59.933333333333316], [62.0, 124.0], [63.0, 113.4375], [64.0, 142.88888888888889], [65.0, 93.8], [66.0, 325.54545454545456], [67.0, 119.0], [68.0, 84.2], [69.0, 77.44444444444444], [70.0, 417.6190476190476], [71.0, 55.199999999999996], [72.0, 139.75], [73.0, 49.50000000000001], [74.0, 47.83333333333333], [75.0, 49.41176470588236], [76.0, 45.66666666666666], [77.0, 63.666666666666664], [78.0, 74.6], [79.0, 173.62499999999997], [80.0, 151.25], [81.0, 426.77777777777777], [82.0, 171.63636363636365], [83.0, 103.52631578947367], [84.0, 66.0], [85.0, 48.559999999999995], [87.0, 48.5], [86.0, 56.333333333333336], [90.0, 65.4], [91.0, 311.7647058823529], [89.0, 69.5], [88.0, 149.95238095238093], [92.0, 99.25], [93.0, 94.25], [94.0, 151.0], [95.0, 143.21739130434784], [97.0, 196.75], [98.0, 86.4848484848485], [99.0, 116.25], [96.0, 73.33333333333333], [100.0, 56.166666666666664], [101.0, 150.16666666666669], [102.0, 438.00000000000006], [103.0, 119.0625], [104.0, 166.625], [105.0, 77.22222222222223], [106.0, 63.25], [107.0, 413.66666666666663], [108.0, 306.125], [109.0, 160.5], [111.0, 143.76923076923077], [110.0, 60.0], [112.0, 134.80000000000004], [113.0, 97.83333333333333], [114.0, 134.03030303030303], [115.0, 60.0], [116.0, 160.0625], [118.0, 115.4], [119.0, 136.14285714285717], [117.0, 161.5], [120.0, 134.5], [121.0, 241.22580645161304], [122.0, 252.83999999999997], [123.0, 319.0714285714285], [124.0, 67.0], [126.0, 92.0], [127.0, 159.41666666666669], [125.0, 143.83333333333331], [128.0, 223.09756097560975], [129.0, 201.87500000000003], [130.0, 103.54545454545456], [131.0, 115.28571428571428], [133.0, 60.57142857142857], [134.0, 194.92857142857144], [135.0, 189.95833333333334], [132.0, 145.75], [136.0, 143.8181818181818], [138.0, 290.0], [140.0, 103.05882352941177], [141.0, 234.60869565217388], [143.0, 75.87500000000001], [142.0, 48.833333333333336], [139.0, 310.2857142857143], [137.0, 236.7857142857143], [145.0, 294.85714285714283], [146.0, 260.41666666666663], [147.0, 161.0], [148.0, 99.42857142857143], [149.0, 61.4], [151.0, 50.199999999999996], [150.0, 50.22222222222222], [144.0, 272.10526315789474], [152.0, 48.66666666666667], [153.0, 191.60000000000002], [154.0, 396.33333333333337], [155.0, 145.0416666666667], [156.0, 312.9411764705883], [157.0, 179.0], [158.0, 167.97058823529412], [159.0, 150.0], [161.0, 509.5833333333333], [162.0, 198.83333333333334], [163.0, 142.7755102040816], [164.0, 329.55555555555554], [165.0, 191.49999999999997], [166.0, 185.45000000000002], [167.0, 361.0], [160.0, 93.84210526315786], [168.0, 138.64999999999998], [169.0, 230.57142857142858], [170.0, 168.0], [171.0, 170.37037037037032], [172.0, 367.2777777777778], [174.0, 165.516129032258], [175.0, 179.9076923076923], [173.0, 255.3454545454545], [176.0, 148.20000000000002], [177.0, 125.6470588235294], [178.0, 195.87500000000003], [179.0, 202.5128205128205], [180.0, 179.99999999999997], [183.0, 157.27272727272725], [182.0, 280.0], [181.0, 509.6315789473684], [184.0, 202.71874999999997], [188.0, 314.2636363636363], [190.0, 152.1794871794872], [191.0, 176.9809523809524], [189.0, 189.96551724137933], [187.0, 96.19999999999999], [186.0, 118.16666666666666], [185.0, 226.96153846153845], [193.0, 353.5890410958904], [195.0, 201.4509803921569], [196.0, 174.0588235294118], [197.0, 154.7200000000001], [198.0, 161.1578947368421], [199.0, 124.78571428571429], [194.0, 196.72727272727272], [192.0, 54.0], [200.0, 184.96739130434784], [201.0, 242.25663716814168], [202.0, 209.3333333333334], [203.0, 363.71428571428567], [205.0, 358.4400000000001], [207.0, 200.91111111111115], [206.0, 165.29687500000003], [204.0, 784.0], [208.0, 262.1454545454545], [209.0, 201.60714285714286], [210.0, 292.0], [212.0, 174.46226415094333], [215.0, 312.0652173913043], [214.0, 336.5], [213.0, 154.87499999999997], [211.0, 153.95652173913044], [218.0, 202.37499999999997], [219.0, 205.38888888888886], [220.0, 246.91999999999996], [221.0, 219.0185185185185], [223.0, 214.55555555555554], [222.0, 346.7857142857143], [217.0, 251.58695652173915], [216.0, 249.78260869565213], [225.0, 172.7777777777778], [226.0, 194.5], [227.0, 173.51282051282055], [228.0, 329.87692307692305], [229.0, 261.25], [230.0, 196.58208955223884], [231.0, 226.20000000000007], [224.0, 182.9523809523809], [232.0, 235.7869822485208], [233.0, 393.7222222222222], [234.0, 277.5], [235.0, 232.87619047619046], [236.0, 266.6153846153847], [237.0, 315.5008403361346], [238.0, 271.41379310344837], [239.0, 447.51098901098896], [240.0, 342.52284263959393], [241.0, 274.96860986547085], [242.0, 218.5172413793104], [243.0, 214.57812499999997], [244.0, 168.79310344827584], [245.0, 121.19354838709675], [246.0, 240.0676156583629], [247.0, 332.8], [248.0, 229.2490774907747], [250.0, 214.46153846153848], [251.0, 237.12761904761888], [252.0, 261.35131195335276], [253.0, 358.15865384615404], [254.0, 84.33333333333333], [255.0, 377.6822916666667], [249.0, 265.42352941176466], [259.0, 1526.502564102564], [257.0, 448.34177215189874], [256.0, 931.7285714285716], [263.0, 2194.473684210526], [262.0, 1948.5714285714284], [258.0, 894.8666666666666], [260.0, 540.205479452055], [261.0, 1012.1744966442951], [265.0, 2084.062068965518], [264.0, 3099.4538461538464], [267.0, 4159.028571428572], [266.0, 2879.6555555555565], [270.0, 2455.658536585366], [271.0, 1740.5], [268.0, 3265.3207547169814], [269.0, 5040.913043478262], [274.0, 83.0], [272.0, 6052.866666666667], [273.0, 52.0], [275.0, 4382.009345794392], [284.0, 2090.2], [286.0, 1819.2666666666667], [285.0, 43.75000000000001], [287.0, 2722.958333333333], [280.0, 65.4], [277.0, 57.111111111111114], [276.0, 4385.928571428572], [278.0, 4368.387096774193], [279.0, 55.375], [281.0, 2911.8571428571427], [282.0, 6983.791666666667], [283.0, 69.0], [301.0, 114.0], [288.0, 58.9047619047619], [289.0, 70.28571428571429], [290.0, 67.76470588235293], [300.0, 1242.285714285714], [291.0, 98.66666666666667], [293.0, 102.2], [292.0, 103.15384615384616], [294.0, 49.0], [295.0, 80.75], [296.0, 94.66666666666666], [297.0, 94.0], [298.0, 64.33333333333333], [303.0, 100.125], [302.0, 36.0], [305.0, 544.0], [304.0, 233.66666666666669], [306.0, 1089.6666666666665], [307.0, 334.99999999999994], [308.0, 580.5714285714286], [309.0, 79.72727272727273], [310.0, 189.44444444444446], [311.0, 154.07692307692307], [312.0, 421.5], [318.0, 180.78125], [319.0, 277.3333333333333], [316.0, 241.66666666666666], [317.0, 146.8181818181818], [313.0, 334.5714285714286], [314.0, 526.25], [315.0, 143.94117647058823], [321.0, 203.9230769230769], [320.0, 545.3333333333333], [323.0, 234.3], [322.0, 194.85714285714286], [332.0, 299.7142857142857], [334.0, 294.7142857142857], [333.0, 1588.1538461538462], [335.0, 360.4166666666667], [328.0, 227.6153846153846], [324.0, 927.5], [325.0, 242.33333333333337], [326.0, 402.2222222222223], [327.0, 616.0], [329.0, 719.2], [330.0, 520.5555555555555], [331.0, 185.64705882352942], [337.0, 186.37500000000003], [336.0, 58.875], [338.0, 489.22222222222223], [339.0, 206.30434782608697], [340.0, 176.2857142857143], [341.0, 282.8], [342.0, 822.8], [343.0, 131.57142857142858], [347.0, 378.8571428571429], [346.0, 165.0], [345.0, 112.33333333333334], [351.0, 369.50000000000006], [350.0, 147.50000000000003], [348.0, 390.0], [349.0, 406.1333333333332], [364.0, 339.50000000000006], [353.0, 218.8888888888889], [352.0, 906.0], [355.0, 610.5], [354.0, 161.0], [356.0, 665.4285714285714], [358.0, 147.8], [357.0, 71.0], [359.0, 98.0], [361.0, 1466.0], [362.0, 639.6], [363.0, 186.0], [365.0, 284.0], [367.0, 523.8333333333334], [360.0, 92.83333333333333], [366.0, 184.5], [369.0, 378.23076923076934], [368.0, 253.30769230769235], [370.0, 440.46153846153845], [371.0, 227.27272727272722], [372.0, 580.6], [373.0, 385.5454545454546], [374.0, 221.20000000000005], [375.0, 247.73333333333332], [376.0, 297.1388888888889], [382.0, 298.8260869565217], [383.0, 267.0], [380.0, 311.4666666666667], [381.0, 332.2857142857142], [377.0, 296.4545454545454], [378.0, 340.3333333333333], [379.0, 392.1818181818182], [385.0, 118.3076923076923], [384.0, 257.8333333333333], [386.0, 173.0], [387.0, 207.84], [388.0, 181.85000000000002], [389.0, 245.2], [390.0, 111.75], [391.0, 236.66666666666666], [392.0, 221.49999999999997], [398.0, 296.4615384615385], [399.0, 145.44444444444446], [396.0, 414.4], [397.0, 202.5454545454546], [393.0, 403.69230769230774], [394.0, 220.72727272727272], [395.0, 474.25], [401.0, 255.0], [400.0, 268.19047619047615], [402.0, 193.0], [403.0, 193.43999999999997], [412.0, 597.1666666666665], [414.0, 103.00000000000001], [413.0, 359.0], [415.0, 46.0], [408.0, 167.76190476190473], [404.0, 236.4], [405.0, 338.99999999999994], [406.0, 142.0], [407.0, 338.85714285714283], [409.0, 291.2857142857143], [410.0, 240.33333333333334], [411.0, 409.2777777777777], [417.0, 339.6666666666667], [416.0, 72.5], [418.0, 126.00000000000003], [419.0, 349.8333333333333], [420.0, 317.87500000000006], [421.0, 309.1], [423.0, 211.375], [422.0, 203.08695652173915], [424.0, 319.0], [431.0, 547.0], [429.0, 155.94444444444446], [428.0, 55.666666666666664], [430.0, 517.0], [425.0, 532.0833333333334], [426.0, 369.77419354838713], [427.0, 290.06249999999994], [433.0, 742.125], [432.0, 439.5], [434.0, 324.19298245614044], [435.0, 269.0], [436.0, 224.69696969696972], [437.0, 395.7333333333333], [438.0, 719.0], [439.0, 449.70588235294116], [440.0, 240.0], [446.0, 510.9508196721309], [447.0, 359.90000000000015], [444.0, 629.6428571428572], [445.0, 60.16666666666667], [441.0, 334.0], [442.0, 371.8], [443.0, 334.8484848484848], [450.0, 388.4444444444445], [451.0, 547.125], [460.0, 238.047619047619], [461.0, 260.03333333333336], [463.0, 304.33333333333326], [462.0, 141.0], [452.0, 394.8125], [453.0, 1156.5], [454.0, 383.37499999999994], [455.0, 528.2352941176472], [449.0, 176.66666666666666], [448.0, 184.63636363636363], [456.0, 250.40000000000012], [457.0, 296.8148148148148], [459.0, 172.68421052631578], [458.0, 253.29310344827584], [465.0, 338.99999999999994], [464.0, 225.81250000000003], [466.0, 263.6326530612245], [467.0, 42.5], [469.0, 247.46913580246908], [468.0, 289.38461538461536], [470.0, 391.4545454545454], [471.0, 387.7910447761194], [472.0, 1473.6666666666665], [475.0, 277.29310344827576], [474.0, 56.0], [473.0, 145.0], [476.0, 468.40625000000006], [477.0, 68.0], [478.0, 779.2878787878785], [479.0, 421.3258426966292], [481.0, 385.68750000000006], [480.0, 401.0972222222222], [482.0, 471.0666666666668], [483.0, 438.6808510638297], [485.0, 374.4900662251655], [484.0, 375.2380952380952], [486.0, 255.94366197183075], [487.0, 434.8888888888888], [488.0, 178.92857142857142], [495.0, 393.80115830115847], [494.0, 432.63636363636374], [492.0, 624.4114285714284], [493.0, 448.0], [489.0, 288.0487804878049], [490.0, 410.67241379310366], [491.0, 641.1355932203387], [496.0, 267.22978723404253], [497.0, 298.61809045226124], [499.0, 347.07811158798256], [500.0, 476.0085973571073], [498.0, 245.92857142857144], [1.0, 40.666666666666664]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[350.0121999999991, 494.649240000002]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.57669356E12, "maxY": 158099.43333333332, "series": [{"data": [[1.57669362E12, 158099.43333333332], [1.57669356E12, 117316.48333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.57669362E12, 0.0], [1.57669356E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57669362E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 431.4918771715647, "minX": 1.57669356E12, "maxY": 541.5144589227257, "series": [{"data": [[1.57669362E12, 541.5144589227257], [1.57669356E12, 431.4918771715647]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57669362E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 431.4023852004887, "minX": 1.57669356E12, "maxY": 541.4241516270635, "series": [{"data": [[1.57669362E12, 541.4241516270635], [1.57669356E12, 431.4023852004887]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57669362E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.57669356E12, "maxY": 4.9E-324, "series": [{"data": [[1.57669362E12, 0.0], [1.57669356E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57669362E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 30.0, "minX": 1.57669356E12, "maxY": 23838.0, "series": [{"data": [[1.57669362E12, 23838.0], [1.57669356E12, 11979.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.57669362E12, 30.0], [1.57669356E12, 30.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.57669362E12, 693.0], [1.57669356E12, 999.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.57669362E12, 16661.719999999994], [1.57669356E12, 2242.5]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.57669362E12, 1017.0], [1.57669356E12, 1345.5]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57669362E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 37.0, "minX": 6.0, "maxY": 809.0, "series": [{"data": [[514.0, 786.5], [541.0, 293.0], [534.0, 809.0], [530.0, 45.0], [562.0, 321.0], [575.0, 283.0], [630.0, 134.0], [39.0, 40.0], [700.0, 543.0], [701.0, 255.0], [43.0, 37.0], [739.0, 462.0], [747.0, 375.0], [757.0, 98.0], [768.0, 484.0], [780.0, 575.0], [814.0, 109.0], [836.0, 85.5], [854.0, 64.0], [877.0, 204.0], [872.0, 332.5], [882.0, 400.5], [871.0, 62.0], [926.0, 193.5], [913.0, 63.0], [903.0, 109.0], [911.0, 71.0], [919.0, 59.0], [900.0, 57.0], [942.0, 147.0], [58.0, 40.0], [1138.0, 86.0], [90.0, 46.5], [6.0, 38.5], [263.0, 94.0], [299.0, 110.0], [312.0, 91.0], [19.0, 37.0], [389.0, 133.0], [407.0, 76.0], [439.0, 242.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1138.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 37.0, "minX": 6.0, "maxY": 809.0, "series": [{"data": [[514.0, 786.5], [541.0, 293.0], [534.0, 809.0], [530.0, 45.0], [562.0, 321.0], [575.0, 283.0], [630.0, 134.0], [39.0, 40.0], [700.0, 543.0], [701.0, 255.0], [43.0, 37.0], [739.0, 462.0], [747.0, 375.0], [757.0, 98.0], [768.0, 484.0], [780.0, 575.0], [814.0, 109.0], [836.0, 85.5], [854.0, 64.0], [877.0, 204.0], [872.0, 332.5], [882.0, 400.5], [871.0, 61.0], [926.0, 193.5], [913.0, 63.0], [903.0, 108.0], [911.0, 71.0], [919.0, 59.0], [900.0, 57.0], [942.0, 147.0], [58.0, 40.0], [1138.0, 86.0], [90.0, 46.5], [6.0, 38.5], [263.0, 94.0], [299.0, 103.0], [312.0, 90.5], [19.0, 37.0], [389.0, 133.0], [407.0, 75.0], [439.0, 242.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1138.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 185.68333333333334, "minX": 1.57669356E12, "maxY": 230.98333333333332, "series": [{"data": [[1.57669362E12, 230.98333333333332], [1.57669356E12, 185.68333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57669362E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 177.48333333333332, "minX": 1.57669356E12, "maxY": 239.18333333333334, "series": [{"data": [[1.57669362E12, 239.18333333333334], [1.57669356E12, 177.48333333333332]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.57669362E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 177.48333333333332, "minX": 1.57669356E12, "maxY": 239.18333333333334, "series": [{"data": [[1.57669362E12, 239.18333333333334], [1.57669356E12, 177.48333333333332]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57669362E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 177.48333333333332, "minX": 1.57669356E12, "maxY": 239.18333333333334, "series": [{"data": [[1.57669362E12, 239.18333333333334], [1.57669356E12, 177.48333333333332]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.57669362E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

