/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 32.0, "minX": 0.0, "maxY": 40265.0, "series": [{"data": [[0.0, 32.0], [0.1, 38.0], [0.2, 40.0], [0.3, 42.0], [0.4, 44.0], [0.5, 46.0], [0.6, 47.0], [0.7, 48.0], [0.8, 49.0], [0.9, 50.0], [1.0, 51.0], [1.1, 52.0], [1.2, 53.0], [1.3, 54.0], [1.4, 55.0], [1.5, 56.0], [1.6, 57.0], [1.7, 58.0], [1.8, 59.0], [1.9, 60.0], [2.0, 61.0], [2.1, 62.0], [2.2, 64.0], [2.3, 65.0], [2.4, 65.0], [2.5, 67.0], [2.6, 68.0], [2.7, 69.0], [2.8, 70.0], [2.9, 71.0], [3.0, 72.0], [3.1, 73.0], [3.2, 74.0], [3.3, 76.0], [3.4, 77.0], [3.5, 79.0], [3.6, 80.0], [3.7, 81.0], [3.8, 82.0], [3.9, 83.0], [4.0, 84.0], [4.1, 85.0], [4.2, 87.0], [4.3, 87.0], [4.4, 88.0], [4.5, 90.0], [4.6, 91.0], [4.7, 92.0], [4.8, 93.0], [4.9, 95.0], [5.0, 96.0], [5.1, 98.0], [5.2, 99.0], [5.3, 100.0], [5.4, 101.0], [5.5, 102.0], [5.6, 103.0], [5.7, 103.0], [5.8, 104.0], [5.9, 105.0], [6.0, 106.0], [6.1, 107.0], [6.2, 109.0], [6.3, 110.0], [6.4, 111.0], [6.5, 112.0], [6.6, 113.0], [6.7, 114.0], [6.8, 115.0], [6.9, 117.0], [7.0, 118.0], [7.1, 119.0], [7.2, 119.0], [7.3, 120.0], [7.4, 121.0], [7.5, 122.0], [7.6, 124.0], [7.7, 125.0], [7.8, 126.0], [7.9, 127.0], [8.0, 128.0], [8.1, 129.0], [8.2, 130.0], [8.3, 131.0], [8.4, 132.0], [8.5, 133.0], [8.6, 133.0], [8.7, 134.0], [8.8, 135.0], [8.9, 136.0], [9.0, 137.0], [9.1, 138.0], [9.2, 138.0], [9.3, 139.0], [9.4, 140.0], [9.5, 141.0], [9.6, 141.0], [9.7, 142.0], [9.8, 142.0], [9.9, 143.0], [10.0, 144.0], [10.1, 144.0], [10.2, 145.0], [10.3, 145.0], [10.4, 146.0], [10.5, 147.0], [10.6, 147.0], [10.7, 148.0], [10.8, 149.0], [10.9, 150.0], [11.0, 150.0], [11.1, 151.0], [11.2, 151.0], [11.3, 152.0], [11.4, 152.0], [11.5, 153.0], [11.6, 153.0], [11.7, 154.0], [11.8, 154.0], [11.9, 154.0], [12.0, 155.0], [12.1, 156.0], [12.2, 156.0], [12.3, 157.0], [12.4, 157.0], [12.5, 158.0], [12.6, 158.0], [12.7, 159.0], [12.8, 159.0], [12.9, 160.0], [13.0, 160.0], [13.1, 161.0], [13.2, 162.0], [13.3, 163.0], [13.4, 163.0], [13.5, 164.0], [13.6, 164.0], [13.7, 165.0], [13.8, 166.0], [13.9, 167.0], [14.0, 168.0], [14.1, 169.0], [14.2, 170.0], [14.3, 171.0], [14.4, 172.0], [14.5, 173.0], [14.6, 175.0], [14.7, 176.0], [14.8, 178.0], [14.9, 180.0], [15.0, 181.0], [15.1, 183.0], [15.2, 185.0], [15.3, 186.0], [15.4, 188.0], [15.5, 189.0], [15.6, 191.0], [15.7, 192.0], [15.8, 193.0], [15.9, 195.0], [16.0, 196.0], [16.1, 197.0], [16.2, 199.0], [16.3, 200.0], [16.4, 202.0], [16.5, 203.0], [16.6, 205.0], [16.7, 207.0], [16.8, 209.0], [16.9, 210.0], [17.0, 211.0], [17.1, 212.0], [17.2, 214.0], [17.3, 215.0], [17.4, 216.0], [17.5, 217.0], [17.6, 218.0], [17.7, 219.0], [17.8, 221.0], [17.9, 222.0], [18.0, 224.0], [18.1, 225.0], [18.2, 227.0], [18.3, 228.0], [18.4, 230.0], [18.5, 232.0], [18.6, 233.0], [18.7, 235.0], [18.8, 237.0], [18.9, 239.0], [19.0, 240.0], [19.1, 241.0], [19.2, 242.0], [19.3, 243.0], [19.4, 245.0], [19.5, 245.0], [19.6, 246.0], [19.7, 248.0], [19.8, 248.0], [19.9, 249.0], [20.0, 250.0], [20.1, 251.0], [20.2, 253.0], [20.3, 254.0], [20.4, 254.0], [20.5, 256.0], [20.6, 256.0], [20.7, 257.0], [20.8, 258.0], [20.9, 259.0], [21.0, 260.0], [21.1, 261.0], [21.2, 262.0], [21.3, 263.0], [21.4, 264.0], [21.5, 265.0], [21.6, 266.0], [21.7, 266.0], [21.8, 267.0], [21.9, 268.0], [22.0, 269.0], [22.1, 270.0], [22.2, 270.0], [22.3, 272.0], [22.4, 273.0], [22.5, 274.0], [22.6, 274.0], [22.7, 275.0], [22.8, 276.0], [22.9, 277.0], [23.0, 277.0], [23.1, 278.0], [23.2, 278.0], [23.3, 279.0], [23.4, 280.0], [23.5, 280.0], [23.6, 281.0], [23.7, 281.0], [23.8, 282.0], [23.9, 282.0], [24.0, 283.0], [24.1, 283.0], [24.2, 283.0], [24.3, 284.0], [24.4, 284.0], [24.5, 284.0], [24.6, 285.0], [24.7, 285.0], [24.8, 286.0], [24.9, 286.0], [25.0, 286.0], [25.1, 287.0], [25.2, 287.0], [25.3, 288.0], [25.4, 288.0], [25.5, 289.0], [25.6, 289.0], [25.7, 289.0], [25.8, 290.0], [25.9, 290.0], [26.0, 291.0], [26.1, 291.0], [26.2, 291.0], [26.3, 292.0], [26.4, 292.0], [26.5, 293.0], [26.6, 293.0], [26.7, 294.0], [26.8, 294.0], [26.9, 294.0], [27.0, 295.0], [27.1, 295.0], [27.2, 296.0], [27.3, 296.0], [27.4, 297.0], [27.5, 297.0], [27.6, 297.0], [27.7, 298.0], [27.8, 298.0], [27.9, 299.0], [28.0, 299.0], [28.1, 299.0], [28.2, 300.0], [28.3, 300.0], [28.4, 301.0], [28.5, 301.0], [28.6, 302.0], [28.7, 302.0], [28.8, 302.0], [28.9, 303.0], [29.0, 303.0], [29.1, 304.0], [29.2, 304.0], [29.3, 305.0], [29.4, 305.0], [29.5, 305.0], [29.6, 306.0], [29.7, 306.0], [29.8, 307.0], [29.9, 307.0], [30.0, 308.0], [30.1, 309.0], [30.2, 309.0], [30.3, 310.0], [30.4, 310.0], [30.5, 311.0], [30.6, 311.0], [30.7, 311.0], [30.8, 312.0], [30.9, 312.0], [31.0, 313.0], [31.1, 313.0], [31.2, 314.0], [31.3, 314.0], [31.4, 315.0], [31.5, 315.0], [31.6, 316.0], [31.7, 316.0], [31.8, 317.0], [31.9, 317.0], [32.0, 317.0], [32.1, 318.0], [32.2, 318.0], [32.3, 319.0], [32.4, 319.0], [32.5, 319.0], [32.6, 320.0], [32.7, 320.0], [32.8, 321.0], [32.9, 321.0], [33.0, 322.0], [33.1, 322.0], [33.2, 323.0], [33.3, 323.0], [33.4, 324.0], [33.5, 324.0], [33.6, 325.0], [33.7, 325.0], [33.8, 326.0], [33.9, 327.0], [34.0, 327.0], [34.1, 328.0], [34.2, 328.0], [34.3, 329.0], [34.4, 330.0], [34.5, 331.0], [34.6, 331.0], [34.7, 332.0], [34.8, 333.0], [34.9, 333.0], [35.0, 334.0], [35.1, 334.0], [35.2, 335.0], [35.3, 335.0], [35.4, 336.0], [35.5, 336.0], [35.6, 337.0], [35.7, 338.0], [35.8, 338.0], [35.9, 339.0], [36.0, 340.0], [36.1, 341.0], [36.2, 341.0], [36.3, 342.0], [36.4, 342.0], [36.5, 343.0], [36.6, 344.0], [36.7, 344.0], [36.8, 345.0], [36.9, 346.0], [37.0, 346.0], [37.1, 347.0], [37.2, 348.0], [37.3, 349.0], [37.4, 349.0], [37.5, 350.0], [37.6, 351.0], [37.7, 351.0], [37.8, 352.0], [37.9, 353.0], [38.0, 353.0], [38.1, 354.0], [38.2, 355.0], [38.3, 356.0], [38.4, 357.0], [38.5, 357.0], [38.6, 358.0], [38.7, 359.0], [38.8, 360.0], [38.9, 360.0], [39.0, 361.0], [39.1, 362.0], [39.2, 363.0], [39.3, 363.0], [39.4, 364.0], [39.5, 365.0], [39.6, 365.0], [39.7, 366.0], [39.8, 367.0], [39.9, 367.0], [40.0, 368.0], [40.1, 368.0], [40.2, 369.0], [40.3, 370.0], [40.4, 371.0], [40.5, 372.0], [40.6, 373.0], [40.7, 374.0], [40.8, 375.0], [40.9, 375.0], [41.0, 376.0], [41.1, 377.0], [41.2, 379.0], [41.3, 380.0], [41.4, 381.0], [41.5, 381.0], [41.6, 382.0], [41.7, 383.0], [41.8, 384.0], [41.9, 385.0], [42.0, 386.0], [42.1, 386.0], [42.2, 387.0], [42.3, 388.0], [42.4, 389.0], [42.5, 390.0], [42.6, 391.0], [42.7, 392.0], [42.8, 393.0], [42.9, 394.0], [43.0, 395.0], [43.1, 395.0], [43.2, 396.0], [43.3, 397.0], [43.4, 398.0], [43.5, 398.0], [43.6, 400.0], [43.7, 400.0], [43.8, 401.0], [43.9, 402.0], [44.0, 403.0], [44.1, 403.0], [44.2, 404.0], [44.3, 404.0], [44.4, 405.0], [44.5, 405.0], [44.6, 406.0], [44.7, 406.0], [44.8, 407.0], [44.9, 408.0], [45.0, 408.0], [45.1, 409.0], [45.2, 409.0], [45.3, 410.0], [45.4, 410.0], [45.5, 411.0], [45.6, 412.0], [45.7, 412.0], [45.8, 413.0], [45.9, 414.0], [46.0, 414.0], [46.1, 415.0], [46.2, 416.0], [46.3, 417.0], [46.4, 418.0], [46.5, 419.0], [46.6, 420.0], [46.7, 420.0], [46.8, 421.0], [46.9, 421.0], [47.0, 422.0], [47.1, 423.0], [47.2, 424.0], [47.3, 425.0], [47.4, 425.0], [47.5, 426.0], [47.6, 427.0], [47.7, 428.0], [47.8, 428.0], [47.9, 429.0], [48.0, 430.0], [48.1, 430.0], [48.2, 431.0], [48.3, 431.0], [48.4, 432.0], [48.5, 432.0], [48.6, 433.0], [48.7, 433.0], [48.8, 434.0], [48.9, 434.0], [49.0, 435.0], [49.1, 436.0], [49.2, 436.0], [49.3, 437.0], [49.4, 438.0], [49.5, 438.0], [49.6, 439.0], [49.7, 439.0], [49.8, 440.0], [49.9, 440.0], [50.0, 441.0], [50.1, 441.0], [50.2, 442.0], [50.3, 442.0], [50.4, 443.0], [50.5, 443.0], [50.6, 443.0], [50.7, 444.0], [50.8, 444.0], [50.9, 445.0], [51.0, 445.0], [51.1, 445.0], [51.2, 446.0], [51.3, 446.0], [51.4, 446.0], [51.5, 447.0], [51.6, 447.0], [51.7, 448.0], [51.8, 448.0], [51.9, 448.0], [52.0, 448.0], [52.1, 449.0], [52.2, 449.0], [52.3, 449.0], [52.4, 450.0], [52.5, 450.0], [52.6, 450.0], [52.7, 451.0], [52.8, 451.0], [52.9, 451.0], [53.0, 452.0], [53.1, 452.0], [53.2, 452.0], [53.3, 453.0], [53.4, 453.0], [53.5, 453.0], [53.6, 453.0], [53.7, 453.0], [53.8, 454.0], [53.9, 454.0], [54.0, 454.0], [54.1, 454.0], [54.2, 455.0], [54.3, 455.0], [54.4, 455.0], [54.5, 455.0], [54.6, 456.0], [54.7, 456.0], [54.8, 456.0], [54.9, 456.0], [55.0, 457.0], [55.1, 457.0], [55.2, 457.0], [55.3, 458.0], [55.4, 458.0], [55.5, 458.0], [55.6, 458.0], [55.7, 458.0], [55.8, 459.0], [55.9, 459.0], [56.0, 459.0], [56.1, 459.0], [56.2, 460.0], [56.3, 460.0], [56.4, 460.0], [56.5, 461.0], [56.6, 461.0], [56.7, 461.0], [56.8, 462.0], [56.9, 462.0], [57.0, 462.0], [57.1, 462.0], [57.2, 463.0], [57.3, 463.0], [57.4, 463.0], [57.5, 464.0], [57.6, 464.0], [57.7, 464.0], [57.8, 464.0], [57.9, 465.0], [58.0, 465.0], [58.1, 465.0], [58.2, 465.0], [58.3, 466.0], [58.4, 466.0], [58.5, 466.0], [58.6, 466.0], [58.7, 467.0], [58.8, 467.0], [58.9, 467.0], [59.0, 467.0], [59.1, 468.0], [59.2, 468.0], [59.3, 468.0], [59.4, 469.0], [59.5, 469.0], [59.6, 469.0], [59.7, 469.0], [59.8, 470.0], [59.9, 470.0], [60.0, 470.0], [60.1, 471.0], [60.2, 471.0], [60.3, 471.0], [60.4, 472.0], [60.5, 472.0], [60.6, 472.0], [60.7, 473.0], [60.8, 473.0], [60.9, 473.0], [61.0, 473.0], [61.1, 474.0], [61.2, 474.0], [61.3, 474.0], [61.4, 475.0], [61.5, 475.0], [61.6, 475.0], [61.7, 476.0], [61.8, 476.0], [61.9, 477.0], [62.0, 477.0], [62.1, 477.0], [62.2, 477.0], [62.3, 478.0], [62.4, 478.0], [62.5, 478.0], [62.6, 479.0], [62.7, 479.0], [62.8, 479.0], [62.9, 480.0], [63.0, 480.0], [63.1, 480.0], [63.2, 481.0], [63.3, 481.0], [63.4, 481.0], [63.5, 482.0], [63.6, 482.0], [63.7, 482.0], [63.8, 483.0], [63.9, 483.0], [64.0, 483.0], [64.1, 483.0], [64.2, 484.0], [64.3, 484.0], [64.4, 484.0], [64.5, 485.0], [64.6, 485.0], [64.7, 485.0], [64.8, 486.0], [64.9, 486.0], [65.0, 487.0], [65.1, 487.0], [65.2, 487.0], [65.3, 488.0], [65.4, 488.0], [65.5, 488.0], [65.6, 488.0], [65.7, 489.0], [65.8, 489.0], [65.9, 489.0], [66.0, 490.0], [66.1, 490.0], [66.2, 490.0], [66.3, 490.0], [66.4, 491.0], [66.5, 491.0], [66.6, 491.0], [66.7, 492.0], [66.8, 492.0], [66.9, 492.0], [67.0, 493.0], [67.1, 493.0], [67.2, 493.0], [67.3, 494.0], [67.4, 494.0], [67.5, 494.0], [67.6, 494.0], [67.7, 495.0], [67.8, 495.0], [67.9, 496.0], [68.0, 496.0], [68.1, 496.0], [68.2, 496.0], [68.3, 497.0], [68.4, 497.0], [68.5, 497.0], [68.6, 498.0], [68.7, 498.0], [68.8, 498.0], [68.9, 499.0], [69.0, 499.0], [69.1, 499.0], [69.2, 500.0], [69.3, 500.0], [69.4, 501.0], [69.5, 501.0], [69.6, 502.0], [69.7, 502.0], [69.8, 502.0], [69.9, 503.0], [70.0, 503.0], [70.1, 504.0], [70.2, 504.0], [70.3, 504.0], [70.4, 505.0], [70.5, 505.0], [70.6, 505.0], [70.7, 506.0], [70.8, 506.0], [70.9, 507.0], [71.0, 507.0], [71.1, 508.0], [71.2, 508.0], [71.3, 508.0], [71.4, 509.0], [71.5, 509.0], [71.6, 510.0], [71.7, 510.0], [71.8, 511.0], [71.9, 511.0], [72.0, 512.0], [72.1, 512.0], [72.2, 513.0], [72.3, 513.0], [72.4, 514.0], [72.5, 515.0], [72.6, 516.0], [72.7, 516.0], [72.8, 517.0], [72.9, 517.0], [73.0, 518.0], [73.1, 518.0], [73.2, 519.0], [73.3, 520.0], [73.4, 520.0], [73.5, 521.0], [73.6, 522.0], [73.7, 522.0], [73.8, 523.0], [73.9, 524.0], [74.0, 525.0], [74.1, 526.0], [74.2, 527.0], [74.3, 528.0], [74.4, 529.0], [74.5, 530.0], [74.6, 531.0], [74.7, 532.0], [74.8, 533.0], [74.9, 534.0], [75.0, 535.0], [75.1, 536.0], [75.2, 538.0], [75.3, 538.0], [75.4, 539.0], [75.5, 540.0], [75.6, 541.0], [75.7, 542.0], [75.8, 543.0], [75.9, 545.0], [76.0, 546.0], [76.1, 547.0], [76.2, 548.0], [76.3, 549.0], [76.4, 550.0], [76.5, 551.0], [76.6, 552.0], [76.7, 553.0], [76.8, 554.0], [76.9, 555.0], [77.0, 555.0], [77.1, 556.0], [77.2, 558.0], [77.3, 559.0], [77.4, 560.0], [77.5, 561.0], [77.6, 561.0], [77.7, 562.0], [77.8, 563.0], [77.9, 564.0], [78.0, 565.0], [78.1, 567.0], [78.2, 568.0], [78.3, 569.0], [78.4, 571.0], [78.5, 572.0], [78.6, 573.0], [78.7, 574.0], [78.8, 575.0], [78.9, 576.0], [79.0, 577.0], [79.1, 578.0], [79.2, 579.0], [79.3, 579.0], [79.4, 580.0], [79.5, 581.0], [79.6, 582.0], [79.7, 583.0], [79.8, 584.0], [79.9, 585.0], [80.0, 586.0], [80.1, 587.0], [80.2, 587.0], [80.3, 589.0], [80.4, 590.0], [80.5, 590.0], [80.6, 591.0], [80.7, 592.0], [80.8, 593.0], [80.9, 594.0], [81.0, 595.0], [81.1, 596.0], [81.2, 598.0], [81.3, 599.0], [81.4, 600.0], [81.5, 600.0], [81.6, 601.0], [81.7, 603.0], [81.8, 604.0], [81.9, 605.0], [82.0, 606.0], [82.1, 607.0], [82.2, 608.0], [82.3, 609.0], [82.4, 611.0], [82.5, 613.0], [82.6, 615.0], [82.7, 617.0], [82.8, 619.0], [82.9, 621.0], [83.0, 623.0], [83.1, 624.0], [83.2, 627.0], [83.3, 629.0], [83.4, 631.0], [83.5, 632.0], [83.6, 634.0], [83.7, 635.0], [83.8, 637.0], [83.9, 638.0], [84.0, 639.0], [84.1, 640.0], [84.2, 641.0], [84.3, 643.0], [84.4, 644.0], [84.5, 645.0], [84.6, 647.0], [84.7, 649.0], [84.8, 651.0], [84.9, 652.0], [85.0, 654.0], [85.1, 656.0], [85.2, 659.0], [85.3, 662.0], [85.4, 665.0], [85.5, 668.0], [85.6, 670.0], [85.7, 672.0], [85.8, 674.0], [85.9, 677.0], [86.0, 680.0], [86.1, 682.0], [86.2, 684.0], [86.3, 686.0], [86.4, 688.0], [86.5, 689.0], [86.6, 692.0], [86.7, 693.0], [86.8, 695.0], [86.9, 697.0], [87.0, 698.0], [87.1, 700.0], [87.2, 703.0], [87.3, 706.0], [87.4, 710.0], [87.5, 711.0], [87.6, 713.0], [87.7, 716.0], [87.8, 717.0], [87.9, 719.0], [88.0, 721.0], [88.1, 722.0], [88.2, 724.0], [88.3, 725.0], [88.4, 727.0], [88.5, 729.0], [88.6, 730.0], [88.7, 731.0], [88.8, 733.0], [88.9, 735.0], [89.0, 736.0], [89.1, 738.0], [89.2, 739.0], [89.3, 740.0], [89.4, 741.0], [89.5, 743.0], [89.6, 744.0], [89.7, 746.0], [89.8, 747.0], [89.9, 749.0], [90.0, 751.0], [90.1, 752.0], [90.2, 753.0], [90.3, 754.0], [90.4, 756.0], [90.5, 758.0], [90.6, 759.0], [90.7, 761.0], [90.8, 762.0], [90.9, 764.0], [91.0, 766.0], [91.1, 767.0], [91.2, 768.0], [91.3, 769.0], [91.4, 771.0], [91.5, 772.0], [91.6, 773.0], [91.7, 775.0], [91.8, 776.0], [91.9, 778.0], [92.0, 780.0], [92.1, 781.0], [92.2, 782.0], [92.3, 783.0], [92.4, 785.0], [92.5, 788.0], [92.6, 792.0], [92.7, 797.0], [92.8, 804.0], [92.9, 830.0], [93.0, 843.0], [93.1, 854.0], [93.2, 860.0], [93.3, 865.0], [93.4, 868.0], [93.5, 871.0], [93.6, 873.0], [93.7, 877.0], [93.8, 882.0], [93.9, 888.0], [94.0, 898.0], [94.1, 910.0], [94.2, 925.0], [94.3, 935.0], [94.4, 940.0], [94.5, 944.0], [94.6, 948.0], [94.7, 958.0], [94.8, 972.0], [94.9, 983.0], [95.0, 988.0], [95.1, 997.0], [95.2, 1006.0], [95.3, 1012.0], [95.4, 1018.0], [95.5, 1026.0], [95.6, 1033.0], [95.7, 1039.0], [95.8, 1046.0], [95.9, 1053.0], [96.0, 1059.0], [96.1, 1067.0], [96.2, 1073.0], [96.3, 1088.0], [96.4, 1121.0], [96.5, 1181.0], [96.6, 1240.0], [96.7, 1267.0], [96.8, 1302.0], [96.9, 1332.0], [97.0, 1368.0], [97.1, 1407.0], [97.2, 1419.0], [97.3, 1464.0], [97.4, 1681.0], [97.5, 2360.0], [97.6, 4278.0], [97.7, 5634.0], [97.8, 5707.0], [97.9, 7614.0], [98.0, 9624.0], [98.1, 9838.0], [98.2, 10088.0], [98.3, 11742.0], [98.4, 14194.0], [98.5, 14287.0], [98.6, 14361.0], [98.7, 15155.0], [98.8, 16171.0], [98.9, 16317.0], [99.0, 16382.0], [99.1, 16553.0], [99.2, 16640.0], [99.3, 16880.0], [99.4, 17363.0], [99.5, 19235.0], [99.6, 23072.0], [99.7, 23147.0], [99.8, 23249.0], [99.9, 30328.0], [100.0, 40265.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 6385.0, "series": [{"data": [[0.0, 1312.0], [100.0, 2752.0], [35100.0, 1.0], [35300.0, 1.0], [38900.0, 1.0], [38700.0, 2.0], [39100.0, 2.0], [39700.0, 2.0], [39900.0, 1.0], [200.0, 2968.0], [300.0, 3864.0], [400.0, 6385.0], [500.0, 3066.0], [600.0, 1416.0], [700.0, 1420.0], [800.0, 324.0], [900.0, 274.0], [1000.0, 304.0], [1100.0, 47.0], [1200.0, 66.0], [1300.0, 69.0], [1400.0, 64.0], [1500.0, 11.0], [1600.0, 10.0], [1700.0, 4.0], [1800.0, 6.0], [1900.0, 3.0], [2000.0, 6.0], [2100.0, 3.0], [2300.0, 2.0], [2500.0, 1.0], [2600.0, 1.0], [2800.0, 4.0], [2900.0, 2.0], [3000.0, 2.0], [3200.0, 4.0], [3300.0, 1.0], [3400.0, 1.0], [3500.0, 1.0], [3600.0, 2.0], [3800.0, 1.0], [3900.0, 1.0], [4000.0, 1.0], [4100.0, 1.0], [4300.0, 2.0], [4200.0, 2.0], [4600.0, 1.0], [4400.0, 2.0], [4500.0, 1.0], [4700.0, 1.0], [5100.0, 3.0], [5000.0, 2.0], [4900.0, 2.0], [5200.0, 3.0], [5300.0, 2.0], [5600.0, 24.0], [5400.0, 1.0], [5700.0, 11.0], [5800.0, 1.0], [6000.0, 3.0], [6100.0, 2.0], [6300.0, 1.0], [6900.0, 3.0], [6700.0, 3.0], [6800.0, 3.0], [7100.0, 1.0], [7500.0, 1.0], [7600.0, 1.0], [7800.0, 2.0], [8000.0, 3.0], [8100.0, 3.0], [8600.0, 3.0], [8400.0, 1.0], [8800.0, 2.0], [9100.0, 2.0], [8900.0, 1.0], [9000.0, 1.0], [9200.0, 1.0], [9300.0, 1.0], [9700.0, 15.0], [9400.0, 3.0], [9600.0, 3.0], [10000.0, 9.0], [9800.0, 20.0], [10100.0, 7.0], [9900.0, 7.0], [10200.0, 2.0], [10600.0, 1.0], [10400.0, 1.0], [10500.0, 1.0], [11000.0, 5.0], [11100.0, 2.0], [10800.0, 1.0], [11200.0, 2.0], [11700.0, 2.0], [12100.0, 3.0], [12200.0, 2.0], [11900.0, 1.0], [12000.0, 1.0], [12500.0, 1.0], [12400.0, 2.0], [12700.0, 1.0], [13200.0, 1.0], [13000.0, 1.0], [13300.0, 1.0], [12800.0, 1.0], [13600.0, 1.0], [13800.0, 1.0], [14100.0, 8.0], [14200.0, 28.0], [14300.0, 29.0], [13900.0, 1.0], [14700.0, 1.0], [14400.0, 9.0], [14500.0, 4.0], [14900.0, 1.0], [15100.0, 3.0], [15300.0, 1.0], [15400.0, 3.0], [15600.0, 1.0], [15800.0, 1.0], [16200.0, 17.0], [16300.0, 42.0], [16100.0, 19.0], [16500.0, 18.0], [16700.0, 17.0], [17000.0, 7.0], [16400.0, 10.0], [16600.0, 11.0], [16800.0, 8.0], [16900.0, 6.0], [17100.0, 7.0], [17200.0, 1.0], [17300.0, 4.0], [18100.0, 1.0], [17500.0, 1.0], [17700.0, 2.0], [17900.0, 1.0], [19000.0, 14.0], [18900.0, 3.0], [19200.0, 6.0], [19400.0, 2.0], [19300.0, 1.0], [20300.0, 6.0], [19800.0, 1.0], [20100.0, 3.0], [20900.0, 1.0], [20600.0, 1.0], [21400.0, 1.0], [20800.0, 2.0], [21700.0, 1.0], [21900.0, 1.0], [23100.0, 30.0], [23000.0, 8.0], [23200.0, 17.0], [23400.0, 8.0], [23300.0, 4.0], [23500.0, 2.0], [24400.0, 3.0], [23700.0, 1.0], [30100.0, 2.0], [30200.0, 1.0], [30300.0, 2.0], [30400.0, 5.0], [30600.0, 1.0], [30900.0, 1.0], [33000.0, 1.0], [35400.0, 1.0], [39000.0, 3.0], [39400.0, 1.0], [40200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 40200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 669.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 17335.0, "series": [{"data": [[0.0, 17335.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 6996.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 669.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 116.0449839343087, "minX": 1.57669164E12, "maxY": 427.77787287715626, "series": [{"data": [[1.5766917E12, 116.0449839343087], [1.57669164E12, 427.77787287715626]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5766917E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 37.0, "minX": 1.0, "maxY": 10773.924528301884, "series": [{"data": [[2.0, 43.333333333333336], [3.0, 43.333333333333336], [4.0, 38.0], [5.0, 44.6], [6.0, 57.0], [7.0, 48.0], [8.0, 51.142857142857146], [9.0, 46.8], [11.0, 54.77777777777777], [12.0, 37.0], [13.0, 78.2], [14.0, 52.64285714285715], [15.0, 48.0], [16.0, 60.50000000000001], [17.0, 68.33333333333333], [18.0, 56.0], [19.0, 57.0], [20.0, 65.75], [21.0, 46.53333333333333], [22.0, 55.6], [23.0, 59.46666666666667], [24.0, 48.4], [25.0, 53.4], [26.0, 56.62500000000001], [27.0, 58.0], [28.0, 52.33928571428574], [29.0, 65.6904761904762], [30.0, 72.2142857142857], [31.0, 63.875], [32.0, 53.449999999999996], [33.0, 66.25], [34.0, 64.92857142857143], [35.0, 69.37499999999999], [36.0, 59.7], [37.0, 58.93333333333333], [38.0, 53.69230769230769], [39.0, 66.22222222222221], [40.0, 80.62499999999999], [41.0, 71.30000000000001], [42.0, 95.00000000000001], [43.0, 95.54545454545455], [44.0, 85.5], [45.0, 90.71875000000003], [46.0, 85.85714285714286], [47.0, 81.0], [48.0, 85.22471910112361], [49.0, 88.55555555555554], [50.0, 82.66666666666666], [51.0, 97.18181818181817], [52.0, 99.61538461538463], [53.0, 73.83333333333333], [54.0, 85.96874999999999], [55.0, 73.33333333333333], [56.0, 84.125], [57.0, 95.00000000000001], [58.0, 110.76000000000002], [59.0, 146.375], [60.0, 113.61904761904762], [61.0, 120.53846153846153], [62.0, 80.9090909090909], [63.0, 94.19230769230771], [65.0, 159.0], [66.0, 133.62499999999997], [67.0, 127.4], [64.0, 146.89999999999998], [68.0, 95.1], [69.0, 125.55555555555556], [70.0, 106.99999999999999], [71.0, 148.0909090909091], [72.0, 146.77777777777774], [73.0, 149.42857142857142], [74.0, 141.20689655172413], [75.0, 198.99999999999997], [77.0, 217.0526315789474], [79.0, 181.66666666666666], [78.0, 165.47058823529414], [76.0, 282.0], [81.0, 197.6], [82.0, 184.375], [83.0, 149.3846153846154], [80.0, 164.0], [84.0, 142.58823529411762], [85.0, 152.61538461538458], [86.0, 125.75], [87.0, 152.6923076923077], [89.0, 135.0], [90.0, 226.6551724137931], [91.0, 146.6315789473684], [88.0, 187.0], [92.0, 101.25], [93.0, 127.3181818181818], [94.0, 138.64285714285714], [95.0, 193.1333333333333], [96.0, 251.87878787878793], [97.0, 140.37499999999997], [98.0, 333.1428571428571], [99.0, 108.5], [100.0, 200.72727272727275], [101.0, 185.3076923076923], [102.0, 134.14285714285714], [103.0, 133.21212121212125], [104.0, 240.57142857142858], [105.0, 297.55172413793105], [106.0, 168.92307692307693], [107.0, 176.53333333333333], [108.0, 139.0], [109.0, 213.75], [110.0, 164.0], [111.0, 274.2307692307692], [112.0, 321.9615384615385], [113.0, 330.57692307692304], [114.0, 413.6764705882353], [115.0, 397.00000000000006], [119.0, 562.9545454545455], [118.0, 564.8333333333334], [117.0, 586.1818181818181], [116.0, 618.0], [123.0, 355.78260869565213], [122.0, 339.17391304347825], [121.0, 188.0], [120.0, 162.84210526315786], [125.0, 324.53333333333336], [126.0, 355.27272727272725], [124.0, 222.25], [128.0, 326.5882352941177], [129.0, 269.0208333333333], [130.0, 244.61538461538456], [131.0, 169.45454545454547], [132.0, 218.69999999999996], [133.0, 252.4], [134.0, 274.71428571428567], [135.0, 312.0714285714286], [136.0, 272.8181818181818], [137.0, 176.8125], [138.0, 162.70588235294116], [139.0, 223.73076923076925], [140.0, 163.76923076923075], [141.0, 195.10526315789477], [142.0, 201.4], [143.0, 154.24999999999997], [144.0, 304.94999999999993], [145.0, 261.7], [146.0, 227.64285714285714], [147.0, 138.33333333333331], [148.0, 189.375], [149.0, 204.1153846153846], [150.0, 221.58333333333334], [151.0, 335.61111111111114], [152.0, 279.7647058823529], [154.0, 290.25000000000006], [155.0, 292.9239130434781], [156.0, 378.7368421052632], [157.0, 331.13333333333344], [158.0, 256.9], [159.0, 314.53846153846155], [153.0, 337.8888888888889], [160.0, 213.92857142857142], [161.0, 214.46153846153845], [162.0, 144.25], [163.0, 224.18750000000003], [164.0, 212.37499999999997], [165.0, 184.86363636363635], [166.0, 225.125], [167.0, 289.5454545454546], [168.0, 169.41666666666666], [169.0, 196.58333333333334], [170.0, 279.75], [171.0, 233.06249999999994], [172.0, 317.71428571428567], [173.0, 188.0], [174.0, 158.0], [175.0, 229.5], [178.0, 316.0], [179.0, 318.13793103448285], [180.0, 294.48717948717956], [182.0, 356.3], [183.0, 338.2972972972973], [181.0, 328.7692307692308], [177.0, 339.22580645161287], [184.0, 263.7142857142857], [185.0, 291.2222222222223], [186.0, 386.725], [187.0, 320.5909090909091], [188.0, 274.75000000000006], [189.0, 218.0], [190.0, 402.37499999999994], [191.0, 342.77777777777777], [192.0, 300.33333333333337], [193.0, 398.0833333333334], [194.0, 289.4545454545455], [195.0, 362.66666666666663], [196.0, 637.6129032258065], [197.0, 420.4736842105263], [198.0, 540.6428571428571], [199.0, 327.8108108108108], [200.0, 376.4444444444445], [201.0, 328.35714285714283], [202.0, 658.3076923076924], [203.0, 340.5], [204.0, 280.3999999999999], [205.0, 246.00000000000006], [206.0, 356.5], [207.0, 418.0], [209.0, 329.4999999999999], [214.0, 367.91358024691357], [215.0, 279.6666666666667], [213.0, 466.56249999999994], [212.0, 149.5], [211.0, 476.12499999999994], [210.0, 375.7777777777779], [208.0, 385.77777777777777], [216.0, 255.57142857142858], [219.0, 383.5], [220.0, 424.83870967741933], [221.0, 320.70666666666654], [222.0, 351.46153846153845], [223.0, 308.1162790697674], [218.0, 425.50000000000006], [217.0, 365.4827586206897], [224.0, 432.27272727272725], [226.0, 437.41610738255036], [227.0, 423.5263157894737], [228.0, 616.1842105263157], [229.0, 463.9310344827588], [230.0, 481.36842105263156], [231.0, 701.0681818181818], [225.0, 527.1176470588236], [232.0, 456.2532467532467], [233.0, 187.22222222222223], [234.0, 357.5888888888888], [236.0, 588.9237288135593], [237.0, 680.7884615384619], [238.0, 368.0000000000001], [239.0, 884.9322033898302], [235.0, 339.5405405405405], [240.0, 104.0], [241.0, 495.7272727272728], [242.0, 407.0], [243.0, 266.73684210526307], [244.0, 713.5000000000001], [245.0, 322.0588235294118], [247.0, 2641.138888888888], [246.0, 1807.682352941176], [248.0, 3463.3181818181815], [249.0, 2883.59375], [250.0, 3764.6666666666674], [251.0, 6349.51724137931], [253.0, 6761.0], [254.0, 10273.918918918916], [255.0, 4962.5], [252.0, 8625.145161290322], [257.0, 193.33333333333334], [256.0, 4789.75], [258.0, 156.8], [259.0, 10773.924528301884], [268.0, 6586.199999999998], [269.0, 133.20000000000002], [270.0, 5339.214285714286], [271.0, 3327.0499999999997], [264.0, 6102.199999999999], [260.0, 7253.24], [261.0, 6915.467741935485], [262.0, 111.8], [263.0, 147.33333333333334], [265.0, 105.5], [267.0, 3005.727272727273], [266.0, 10252.857142857143], [275.0, 94.61538461538461], [273.0, 1572.6363636363637], [272.0, 405.6666666666667], [274.0, 109.16666666666667], [276.0, 132.42857142857144], [278.0, 68.91666666666666], [277.0, 66.00000000000001], [279.0, 116.0], [280.0, 2101.6666666666665], [286.0, 159.5], [287.0, 177.58333333333331], [284.0, 123.25], [285.0, 96.45454545454545], [281.0, 170.5], [282.0, 133.33333333333334], [283.0, 142.63636363636365], [289.0, 111.92857142857143], [288.0, 173.85714285714286], [290.0, 159.5], [291.0, 189.73333333333335], [292.0, 206.33333333333334], [293.0, 137.26666666666668], [294.0, 129.78571428571425], [295.0, 211.5], [296.0, 160.85714285714283], [297.0, 740.9333333333334], [302.0, 166.4], [303.0, 164.09090909090912], [300.0, 218.11111111111111], [301.0, 239.81818181818184], [298.0, 158.22222222222223], [299.0, 164.0], [305.0, 191.20000000000002], [304.0, 181.6], [306.0, 237.42857142857147], [307.0, 167.56250000000003], [308.0, 138.10526315789474], [309.0, 155.8], [310.0, 137.44444444444446], [311.0, 138.66666666666666], [313.0, 259.1666666666667], [312.0, 136.0], [319.0, 143.0], [318.0, 142.9090909090909], [317.0, 137.16666666666666], [316.0, 132.0], [314.0, 203.82142857142856], [315.0, 173.33333333333331], [334.0, 135.0], [335.0, 137.33333333333331], [333.0, 1001.6111111111112], [332.0, 164.66666666666666], [331.0, 161.05882352941174], [330.0, 160.22222222222226], [329.0, 148.80303030303028], [328.0, 133.4375], [327.0, 139.25], [321.0, 164.1666666666667], [320.0, 154.6], [323.0, 1566.6363636363635], [322.0, 162.66666666666666], [326.0, 147.5], [325.0, 146.6], [324.0, 149.93333333333334], [337.0, 261.090909090909], [336.0, 274.53846153846155], [338.0, 421.875], [339.0, 260.77777777777777], [340.0, 417.1666666666667], [341.0, 211.60784313725492], [342.0, 303.83333333333326], [343.0, 231.3157894736842], [345.0, 436.20000000000005], [344.0, 5183.666666666666], [350.0, 331.1428571428571], [351.0, 276.6666666666667], [348.0, 254.4], [349.0, 364.92307692307696], [346.0, 260.30000000000007], [347.0, 387.42857142857144], [353.0, 392.1538461538462], [352.0, 218.17647058823528], [354.0, 402.7142857142857], [355.0, 327.1818181818182], [356.0, 307.55000000000007], [357.0, 388.3076923076923], [358.0, 352.7692307692308], [359.0, 406.00000000000006], [360.0, 356.95652173913055], [367.0, 428.0], [366.0, 435.32142857142856], [365.0, 431.16], [364.0, 1564.1666666666665], [361.0, 523.8333333333334], [363.0, 444.45833333333326], [362.0, 438.3448275862069], [382.0, 239.33333333333334], [383.0, 246.0], [381.0, 238.125], [380.0, 237.2857142857143], [379.0, 238.6923076923077], [378.0, 230.75], [377.0, 237.0], [376.0, 239.5], [375.0, 221.72727272727275], [369.0, 222.20833333333334], [368.0, 242.47058823529412], [371.0, 211.5], [370.0, 224.88235294117644], [374.0, 843.7391304347829], [373.0, 216.55000000000004], [372.0, 212.0952380952381], [399.0, 270.7234042553191], [393.0, 485.77777777777777], [394.0, 447.26666666666665], [395.0, 424.8636363636363], [396.0, 686.0731707317075], [387.0, 450.87499999999983], [386.0, 259.375], [385.0, 248.27272727272728], [384.0, 238.75], [397.0, 479.37499999999994], [398.0, 350.2222222222223], [392.0, 278.0], [391.0, 258.5588235294117], [390.0, 248.37931034482756], [389.0, 244.76190476190476], [388.0, 240.25], [401.0, 295.6530612244898], [400.0, 444.857142857143], [402.0, 444.44444444444446], [403.0, 318.2162162162161], [404.0, 439.25], [405.0, 296.85964912280724], [406.0, 516.2461538461539], [407.0, 352.7111111111111], [408.0, 396.6315789473683], [414.0, 650.5], [415.0, 425.7307692307692], [412.0, 347.74666666666656], [413.0, 450.9333333333333], [409.0, 452.5], [410.0, 488.83333333333337], [411.0, 637.1111111111112], [417.0, 359.6428571428572], [416.0, 345.96], [419.0, 401.44444444444446], [418.0, 360.67999999999995], [428.0, 297.47368421052636], [429.0, 376.6598639455781], [430.0, 292.2094240837697], [431.0, 563.770642201835], [420.0, 845.59375], [421.0, 415.5454545454544], [422.0, 470.53846153846166], [423.0, 409.8], [424.0, 321.6097560975609], [425.0, 298.84999999999997], [426.0, 582.7906976744184], [427.0, 446.4937238493723], [434.0, 467.13207547169816], [432.0, 467.19626168224295], [433.0, 498.63157894736855], [435.0, 347.29166666666674], [444.0, 371.75], [445.0, 314.75000000000006], [446.0, 385.8347107438018], [447.0, 308.31999999999994], [436.0, 286.3333333333334], [437.0, 316.05494505494505], [438.0, 326.99999999999994], [439.0, 300.2972972972973], [440.0, 293.8446601941748], [441.0, 301.41071428571433], [442.0, 295.23529411764713], [443.0, 325.88888888888886], [460.0, 373.7484472049689], [448.0, 308.6153846153845], [449.0, 308.73584905660397], [451.0, 331.12], [450.0, 321.14285714285717], [461.0, 553.8702928870293], [462.0, 347.5625], [463.0, 336.34188034188037], [453.0, 435.3291139240506], [452.0, 659.1521739130435], [454.0, 567.9871794871796], [455.0, 549.5714285714286], [456.0, 568.8125], [457.0, 518.2666666666668], [458.0, 443.6808510638297], [459.0, 459.19672131147547], [465.0, 578.9999999999999], [464.0, 513.0833333333334], [466.0, 766.2], [467.0, 325.90134529147963], [476.0, 468.45454545454544], [477.0, 479.67741935483866], [478.0, 393.20000000000016], [479.0, 427.3636363636364], [468.0, 1409.8947368421054], [469.0, 621.9137931034485], [470.0, 807.777777777778], [471.0, 754.1333333333333], [472.0, 571.0344827586207], [473.0, 393.2522123893808], [474.0, 418.31818181818187], [475.0, 437.3703703703704], [487.0, 393.7578947368421], [484.0, 404.0], [485.0, 559.5641025641028], [486.0, 443.86250000000007], [488.0, 607.8399999999998], [494.0, 605.8119658119658], [495.0, 3756.8168761220873], [489.0, 445.1189427312774], [490.0, 426.8467432950195], [491.0, 400.3049327354259], [492.0, 454.35], [483.0, 382.18181818181813], [482.0, 378.0], [481.0, 421.8461538461538], [480.0, 430.7472527472528], [493.0, 652.5818815331011], [496.0, 467.90196078431364], [497.0, 640.3223684210524], [498.0, 711.0122377622383], [499.0, 595.5011577902756], [500.0, 768.7542992686303], [1.0, 46.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[392.85132, 793.7083200000005]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.57669164E12, "maxY": 243079.05, "series": [{"data": [[1.5766917E12, 30670.95], [1.57669164E12, 243079.05]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5766917E12, 0.0], [1.57669164E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5766917E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 241.63084612638374, "minX": 1.57669164E12, "maxY": 863.367719266634, "series": [{"data": [[1.5766917E12, 241.63084612638374], [1.57669164E12, 863.367719266634]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5766917E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 241.424491253124, "minX": 1.57669164E12, "maxY": 863.22658678319, "series": [{"data": [[1.5766917E12, 241.424491253124], [1.57669164E12, 863.22658678319]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5766917E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.57669164E12, "maxY": 4.9E-324, "series": [{"data": [[1.5766917E12, 0.0], [1.57669164E12, 0.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5766917E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 32.0, "minX": 1.57669164E12, "maxY": 40265.0, "series": [{"data": [[1.5766917E12, 2383.0], [1.57669164E12, 40265.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5766917E12, 32.0], [1.57669164E12, 33.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5766917E12, 569.0], [1.57669164E12, 767.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5766917E12, 1097.96], [1.57669164E12, 16703.360000000102]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5766917E12, 693.9000000000001], [1.57669164E12, 1039.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5766917E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 51.0, "minX": 179.0, "maxY": 10055.0, "series": [{"data": [[525.0, 873.0], [539.0, 487.0], [535.0, 483.0], [537.0, 463.0], [560.0, 386.5], [556.0, 340.0], [569.0, 398.0], [553.0, 272.0], [567.0, 133.0], [579.0, 527.0], [581.0, 464.0], [580.0, 426.0], [601.0, 299.0], [606.0, 256.0], [623.0, 407.0], [626.0, 266.0], [616.0, 146.0], [650.0, 376.5], [662.0, 325.0], [646.0, 298.0], [679.0, 303.0], [179.0, 51.0], [255.0, 644.0], [250.0, 505.0], [295.0, 72.0], [324.0, 294.0], [325.0, 480.0], [336.0, 284.0], [374.0, 446.0], [389.0, 589.0], [390.0, 10055.0], [397.0, 465.0], [403.0, 488.0], [425.0, 581.0], [434.0, 758.0], [441.0, 302.0], [440.0, 435.5], [451.0, 542.0], [449.0, 627.0], [448.0, 689.0], [470.0, 147.0], [476.0, 508.0], [477.0, 589.0], [464.0, 236.0], [492.0, 527.0], [509.0, 161.0], [499.0, 536.0], [496.0, 353.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 679.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 51.0, "minX": 179.0, "maxY": 10055.0, "series": [{"data": [[525.0, 872.0], [539.0, 487.0], [535.0, 483.0], [537.0, 462.0], [560.0, 386.5], [556.0, 339.5], [569.0, 398.0], [553.0, 272.0], [567.0, 133.0], [579.0, 527.0], [581.0, 464.0], [580.0, 425.5], [601.0, 299.0], [606.0, 256.0], [623.0, 407.0], [626.0, 266.0], [616.0, 146.0], [650.0, 376.5], [662.0, 325.0], [646.0, 298.0], [679.0, 303.0], [179.0, 51.0], [255.0, 644.0], [250.0, 505.0], [295.0, 72.0], [324.0, 294.0], [325.0, 480.0], [336.0, 284.0], [374.0, 446.0], [389.0, 589.0], [390.0, 10055.0], [397.0, 464.0], [403.0, 488.0], [425.0, 581.0], [434.0, 758.0], [441.0, 302.0], [440.0, 435.5], [451.0, 540.0], [449.0, 627.0], [448.0, 688.0], [470.0, 147.0], [476.0, 508.0], [477.0, 589.0], [464.0, 236.0], [492.0, 527.0], [509.0, 161.0], [499.0, 536.0], [496.0, 353.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 679.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 43.18333333333333, "minX": 1.57669164E12, "maxY": 373.48333333333335, "series": [{"data": [[1.5766917E12, 43.18333333333333], [1.57669164E12, 373.48333333333335]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5766917E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 46.68333333333333, "minX": 1.57669164E12, "maxY": 369.98333333333335, "series": [{"data": [[1.5766917E12, 46.68333333333333], [1.57669164E12, 369.98333333333335]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5766917E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 46.68333333333333, "minX": 1.57669164E12, "maxY": 369.98333333333335, "series": [{"data": [[1.5766917E12, 46.68333333333333], [1.57669164E12, 369.98333333333335]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5766917E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 46.68333333333333, "minX": 1.57669164E12, "maxY": 369.98333333333335, "series": [{"data": [[1.5766917E12, 46.68333333333333], [1.57669164E12, 369.98333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5766917E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

